// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL.Auth
{
	public partial class TLAuthAuthorization : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			TmpSessions = (1 << 0),
		}

		public bool HasTmpSessions { get { return Flags.HasFlag(Flag.TmpSessions); } set { Flags = value ? (Flags | Flag.TmpSessions) : (Flags & ~Flag.TmpSessions); } }

		public Flag Flags { get; set; }
		public Int32? TmpSessions { get; set; }
		public TLUserBase User { get; set; }

		public TLAuthAuthorization() { }
		public TLAuthAuthorization(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.AuthAuthorization; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			if (HasTmpSessions) TmpSessions = from.ReadInt32();
			User = TLFactory.Read<TLUserBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			if (HasTmpSessions) to.WriteInt32(TmpSessions.Value);
			to.WriteObject(User);
		}

		private void UpdateFlags()
		{
			HasTmpSessions = TmpSessions != null;
		}
	}
}