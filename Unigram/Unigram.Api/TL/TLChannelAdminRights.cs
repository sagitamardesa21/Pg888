// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLChannelAdminRights : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			ChangeInfo = (1 << 0),
			PostMessages = (1 << 1),
			EditMessages = (1 << 2),
			DeleteMessages = (1 << 3),
			BanUsers = (1 << 4),
			InviteUsers = (1 << 5),
			InviteLink = (1 << 6),
			PinMessages = (1 << 7),
			AddAdmins = (1 << 9),
		}

		public bool IsChangeInfo { get { return Flags.HasFlag(Flag.ChangeInfo); } set { Flags = value ? (Flags | Flag.ChangeInfo) : (Flags & ~Flag.ChangeInfo); } }
		public bool IsPostMessages { get { return Flags.HasFlag(Flag.PostMessages); } set { Flags = value ? (Flags | Flag.PostMessages) : (Flags & ~Flag.PostMessages); } }
		public bool IsEditMessages { get { return Flags.HasFlag(Flag.EditMessages); } set { Flags = value ? (Flags | Flag.EditMessages) : (Flags & ~Flag.EditMessages); } }
		public bool IsDeleteMessages { get { return Flags.HasFlag(Flag.DeleteMessages); } set { Flags = value ? (Flags | Flag.DeleteMessages) : (Flags & ~Flag.DeleteMessages); } }
		public bool IsBanUsers { get { return Flags.HasFlag(Flag.BanUsers); } set { Flags = value ? (Flags | Flag.BanUsers) : (Flags & ~Flag.BanUsers); } }
		public bool IsInviteUsers { get { return Flags.HasFlag(Flag.InviteUsers); } set { Flags = value ? (Flags | Flag.InviteUsers) : (Flags & ~Flag.InviteUsers); } }
		public bool IsInviteLink { get { return Flags.HasFlag(Flag.InviteLink); } set { Flags = value ? (Flags | Flag.InviteLink) : (Flags & ~Flag.InviteLink); } }
		public bool IsPinMessages { get { return Flags.HasFlag(Flag.PinMessages); } set { Flags = value ? (Flags | Flag.PinMessages) : (Flags & ~Flag.PinMessages); } }
		public bool IsAddAdmins { get { return Flags.HasFlag(Flag.AddAdmins); } set { Flags = value ? (Flags | Flag.AddAdmins) : (Flags & ~Flag.AddAdmins); } }

		public Flag Flags { get; set; }

		public TLChannelAdminRights() { }
		public TLChannelAdminRights(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelAdminRights; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.WriteInt32((Int32)Flags);
		}
	}
}