// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL.Messages.Methods
{
	/// <summary>
	/// RCP method messages.setInlineBotResults.
	/// Returns <see cref="Telegram.Api.TL.TLBool"/>
	/// </summary>
	public partial class TLMessagesSetInlineBotResults : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			Gallery = (1 << 0),
			Private = (1 << 1),
			NextOffset = (1 << 2),
			SwitchPM = (1 << 3),
		}

		public bool IsGallery { get { return Flags.HasFlag(Flag.Gallery); } set { Flags = value ? (Flags | Flag.Gallery) : (Flags & ~Flag.Gallery); } }
		public bool IsPrivate { get { return Flags.HasFlag(Flag.Private); } set { Flags = value ? (Flags | Flag.Private) : (Flags & ~Flag.Private); } }
		public bool HasNextOffset { get { return Flags.HasFlag(Flag.NextOffset); } set { Flags = value ? (Flags | Flag.NextOffset) : (Flags & ~Flag.NextOffset); } }
		public bool HasSwitchPM { get { return Flags.HasFlag(Flag.SwitchPM); } set { Flags = value ? (Flags | Flag.SwitchPM) : (Flags & ~Flag.SwitchPM); } }

		public Flag Flags { get; set; }
		public Int64 QueryId { get; set; }
		public TLVector<TLInputBotInlineResultBase> Results { get; set; }
		public Int32 CacheTime { get; set; }
		public String NextOffset { get; set; }
		public TLInlineBotSwitchPM SwitchPM { get; set; }

		public TLMessagesSetInlineBotResults() { }
		public TLMessagesSetInlineBotResults(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesSetInlineBotResults; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			QueryId = from.ReadInt64();
			Results = TLFactory.Read<TLVector<TLInputBotInlineResultBase>>(from);
			CacheTime = from.ReadInt32();
			if (HasNextOffset) NextOffset = from.ReadString();
			if (HasSwitchPM) SwitchPM = TLFactory.Read<TLInlineBotSwitchPM>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			to.WriteInt64(QueryId);
			to.WriteObject(Results);
			to.WriteInt32(CacheTime);
			if (HasNextOffset) to.WriteString(NextOffset ?? string.Empty);
			if (HasSwitchPM) to.WriteObject(SwitchPM);
		}

		private void UpdateFlags()
		{
			HasNextOffset = NextOffset != null;
			HasSwitchPM = SwitchPM != null;
		}
	}
}