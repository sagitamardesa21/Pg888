// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChannelBannedRights : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			ViewMessages = (1 << 0),
			SendMessages = (1 << 1),
			SendMedia = (1 << 2),
			SendStickers = (1 << 3),
			SendGifs = (1 << 4),
			SendGames = (1 << 5),
			SendInline = (1 << 6),
			EmbedLinks = (1 << 7),
		}

		public bool IsViewMessages { get { return Flags.HasFlag(Flag.ViewMessages); } set { Flags = value ? (Flags | Flag.ViewMessages) : (Flags & ~Flag.ViewMessages); } }
		public bool IsSendMessages { get { return Flags.HasFlag(Flag.SendMessages); } set { Flags = value ? (Flags | Flag.SendMessages) : (Flags & ~Flag.SendMessages); } }
		public bool IsSendMedia { get { return Flags.HasFlag(Flag.SendMedia); } set { Flags = value ? (Flags | Flag.SendMedia) : (Flags & ~Flag.SendMedia); } }
		public bool IsSendStickers { get { return Flags.HasFlag(Flag.SendStickers); } set { Flags = value ? (Flags | Flag.SendStickers) : (Flags & ~Flag.SendStickers); } }
		public bool IsSendGifs { get { return Flags.HasFlag(Flag.SendGifs); } set { Flags = value ? (Flags | Flag.SendGifs) : (Flags & ~Flag.SendGifs); } }
		public bool IsSendGames { get { return Flags.HasFlag(Flag.SendGames); } set { Flags = value ? (Flags | Flag.SendGames) : (Flags & ~Flag.SendGames); } }
		public bool IsSendInline { get { return Flags.HasFlag(Flag.SendInline); } set { Flags = value ? (Flags | Flag.SendInline) : (Flags & ~Flag.SendInline); } }
		public bool IsEmbedLinks { get { return Flags.HasFlag(Flag.EmbedLinks); } set { Flags = value ? (Flags | Flag.EmbedLinks) : (Flags & ~Flag.EmbedLinks); } }

		public Flag Flags { get; set; }
		public Int32 UntilDate { get; set; }

		public TLChannelBannedRights() { }
		public TLChannelBannedRights(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelBannedRights; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			UntilDate = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0x58CF4249);
			to.Write((Int32)Flags);
			to.Write(UntilDate);
		}
	}
}