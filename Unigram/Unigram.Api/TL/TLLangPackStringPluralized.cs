// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLLangPackStringPluralized : TLLangPackStringBase 
	{
		[Flags]
		public enum Flag : Int32
		{
			ZeroValue = (1 << 0),
			OneValue = (1 << 1),
			TwoValue = (1 << 2),
			FewValue = (1 << 3),
			ManyValue = (1 << 4),
		}

		public bool HasZeroValue { get { return Flags.HasFlag(Flag.ZeroValue); } set { Flags = value ? (Flags | Flag.ZeroValue) : (Flags & ~Flag.ZeroValue); } }
		public bool HasOneValue { get { return Flags.HasFlag(Flag.OneValue); } set { Flags = value ? (Flags | Flag.OneValue) : (Flags & ~Flag.OneValue); } }
		public bool HasTwoValue { get { return Flags.HasFlag(Flag.TwoValue); } set { Flags = value ? (Flags | Flag.TwoValue) : (Flags & ~Flag.TwoValue); } }
		public bool HasFewValue { get { return Flags.HasFlag(Flag.FewValue); } set { Flags = value ? (Flags | Flag.FewValue) : (Flags & ~Flag.FewValue); } }
		public bool HasManyValue { get { return Flags.HasFlag(Flag.ManyValue); } set { Flags = value ? (Flags | Flag.ManyValue) : (Flags & ~Flag.ManyValue); } }

		public Flag Flags { get; set; }
		public String ZeroValue { get; set; }
		public String OneValue { get; set; }
		public String TwoValue { get; set; }
		public String FewValue { get; set; }
		public String ManyValue { get; set; }
		public String OtherValue { get; set; }

		public TLLangPackStringPluralized() { }
		public TLLangPackStringPluralized(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.LangPackStringPluralized; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			Key = from.ReadString();
			if (HasZeroValue) ZeroValue = from.ReadString();
			if (HasOneValue) OneValue = from.ReadString();
			if (HasTwoValue) TwoValue = from.ReadString();
			if (HasFewValue) FewValue = from.ReadString();
			if (HasManyValue) ManyValue = from.ReadString();
			OtherValue = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			to.WriteString(Key ?? string.Empty);
			if (HasZeroValue) to.WriteString(ZeroValue ?? string.Empty);
			if (HasOneValue) to.WriteString(OneValue ?? string.Empty);
			if (HasTwoValue) to.WriteString(TwoValue ?? string.Empty);
			if (HasFewValue) to.WriteString(FewValue ?? string.Empty);
			if (HasManyValue) to.WriteString(ManyValue ?? string.Empty);
			to.WriteString(OtherValue ?? string.Empty);
		}

		private void UpdateFlags()
		{
			HasZeroValue = ZeroValue != null;
			HasOneValue = OneValue != null;
			HasTwoValue = TwoValue != null;
			HasFewValue = FewValue != null;
			HasManyValue = ManyValue != null;
		}
	}
}