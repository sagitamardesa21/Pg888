// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLChannelAdminLogEventsFilter : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			Join = (1 << 0),
			Leave = (1 << 1),
			Invite = (1 << 2),
			Ban = (1 << 3),
			Unban = (1 << 4),
			Kick = (1 << 5),
			Unkick = (1 << 6),
			Promote = (1 << 7),
			Demote = (1 << 8),
			Info = (1 << 9),
			Settings = (1 << 10),
			Pinned = (1 << 11),
			Edit = (1 << 12),
			Delete = (1 << 13),
		}

		public bool IsJoin { get { return Flags.HasFlag(Flag.Join); } set { Flags = value ? (Flags | Flag.Join) : (Flags & ~Flag.Join); } }
		public bool IsLeave { get { return Flags.HasFlag(Flag.Leave); } set { Flags = value ? (Flags | Flag.Leave) : (Flags & ~Flag.Leave); } }
		public bool IsInvite { get { return Flags.HasFlag(Flag.Invite); } set { Flags = value ? (Flags | Flag.Invite) : (Flags & ~Flag.Invite); } }
		public bool IsBan { get { return Flags.HasFlag(Flag.Ban); } set { Flags = value ? (Flags | Flag.Ban) : (Flags & ~Flag.Ban); } }
		public bool IsUnban { get { return Flags.HasFlag(Flag.Unban); } set { Flags = value ? (Flags | Flag.Unban) : (Flags & ~Flag.Unban); } }
		public bool IsKick { get { return Flags.HasFlag(Flag.Kick); } set { Flags = value ? (Flags | Flag.Kick) : (Flags & ~Flag.Kick); } }
		public bool IsUnkick { get { return Flags.HasFlag(Flag.Unkick); } set { Flags = value ? (Flags | Flag.Unkick) : (Flags & ~Flag.Unkick); } }
		public bool IsPromote { get { return Flags.HasFlag(Flag.Promote); } set { Flags = value ? (Flags | Flag.Promote) : (Flags & ~Flag.Promote); } }
		public bool IsDemote { get { return Flags.HasFlag(Flag.Demote); } set { Flags = value ? (Flags | Flag.Demote) : (Flags & ~Flag.Demote); } }
		public bool IsInfo { get { return Flags.HasFlag(Flag.Info); } set { Flags = value ? (Flags | Flag.Info) : (Flags & ~Flag.Info); } }
		public bool IsSettings { get { return Flags.HasFlag(Flag.Settings); } set { Flags = value ? (Flags | Flag.Settings) : (Flags & ~Flag.Settings); } }
		public bool IsPinned { get { return Flags.HasFlag(Flag.Pinned); } set { Flags = value ? (Flags | Flag.Pinned) : (Flags & ~Flag.Pinned); } }
		public bool IsEdit { get { return Flags.HasFlag(Flag.Edit); } set { Flags = value ? (Flags | Flag.Edit) : (Flags & ~Flag.Edit); } }
		public bool IsDelete { get { return Flags.HasFlag(Flag.Delete); } set { Flags = value ? (Flags | Flag.Delete) : (Flags & ~Flag.Delete); } }

		public Flag Flags { get; set; }

		public TLChannelAdminLogEventsFilter() { }
		public TLChannelAdminLogEventsFilter(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.ChannelAdminLogEventsFilter; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.Write(0xEA107AE4);
			to.Write((Int32)Flags);
		}
	}
}