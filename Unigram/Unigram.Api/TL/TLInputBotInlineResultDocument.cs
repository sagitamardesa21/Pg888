// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLInputBotInlineResultDocument : TLInputBotInlineResultBase 
	{
		[Flags]
		public enum Flag : Int32
		{
			Title = (1 << 1),
			Description = (1 << 2),
		}

		public bool HasTitle { get { return Flags.HasFlag(Flag.Title); } set { Flags = value ? (Flags | Flag.Title) : (Flags & ~Flag.Title); } }
		public bool HasDescription { get { return Flags.HasFlag(Flag.Description); } set { Flags = value ? (Flags | Flag.Description) : (Flags & ~Flag.Description); } }

		public Flag Flags { get; set; }
		public String Type { get; set; }
		public String Title { get; set; }
		public String Description { get; set; }
		public TLInputDocumentBase Document { get; set; }

		public TLInputBotInlineResultDocument() { }
		public TLInputBotInlineResultDocument(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.InputBotInlineResultDocument; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			Id = from.ReadString();
			Type = from.ReadString();
			if (HasTitle) Title = from.ReadString();
			if (HasDescription) Description = from.ReadString();
			Document = TLFactory.Read<TLInputDocumentBase>(from);
			SendMessage = TLFactory.Read<TLInputBotInlineMessageBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			to.WriteString(Id ?? string.Empty);
			to.WriteString(Type ?? string.Empty);
			if (HasTitle) to.WriteString(Title ?? string.Empty);
			if (HasDescription) to.WriteString(Description ?? string.Empty);
			to.WriteObject(Document);
			to.WriteObject(SendMessage);
		}

		private void UpdateFlags()
		{
			HasTitle = Title != null;
			HasDescription = Description != null;
		}
	}
}