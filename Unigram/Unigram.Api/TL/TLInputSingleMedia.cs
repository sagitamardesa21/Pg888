// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLInputSingleMedia : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			Entities = (1 << 0),
		}

		public bool HasEntities { get { return Flags.HasFlag(Flag.Entities); } set { Flags = value ? (Flags | Flag.Entities) : (Flags & ~Flag.Entities); } }

		public Flag Flags { get; set; }
		public TLInputMediaBase Media { get; set; }
		public Int64 RandomId { get; set; }
		public String Message { get; set; }
		public TLVector<TLMessageEntityBase> Entities { get; set; }

		public TLInputSingleMedia() { }
		public TLInputSingleMedia(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.InputSingleMedia; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			Media = TLFactory.Read<TLInputMediaBase>(from);
			RandomId = from.ReadInt64();
			Message = from.ReadString();
			if (HasEntities) Entities = TLFactory.Read<TLVector<TLMessageEntityBase>>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.WriteInt32((Int32)Flags);
			to.WriteObject(Media);
			to.WriteInt64(RandomId);
			to.WriteString(Message ?? string.Empty);
			if (HasEntities) to.WriteObject(Entities);
		}

		private void UpdateFlags()
		{
			HasEntities = Entities != null;
		}
	}
}