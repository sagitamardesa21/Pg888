// <auto-generated/>
using System;

namespace Telegram.Api.TL
{
	public partial class TLMessageFwdHeader : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			FromId = (1 << 0),
			ChannelId = (1 << 1),
			ChannelPost = (1 << 2),
			PostAuthor = (1 << 3),
		}

		public bool HasFromId { get { return Flags.HasFlag(Flag.FromId); } set { Flags = value ? (Flags | Flag.FromId) : (Flags & ~Flag.FromId); } }
		public bool HasChannelId { get { return Flags.HasFlag(Flag.ChannelId); } set { Flags = value ? (Flags | Flag.ChannelId) : (Flags & ~Flag.ChannelId); } }
		public bool HasChannelPost { get { return Flags.HasFlag(Flag.ChannelPost); } set { Flags = value ? (Flags | Flag.ChannelPost) : (Flags & ~Flag.ChannelPost); } }
		public bool HasPostAuthor { get { return Flags.HasFlag(Flag.PostAuthor); } set { Flags = value ? (Flags | Flag.PostAuthor) : (Flags & ~Flag.PostAuthor); } }

		public Flag Flags { get; set; }
		public Int32? FromId { get; set; }
		public Int32 Date { get; set; }
		public Int32? ChannelId { get; set; }
		public Int32? ChannelPost { get; set; }
		public String PostAuthor { get; set; }

		public TLMessageFwdHeader() { }
		public TLMessageFwdHeader(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessageFwdHeader; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			if (HasFromId) FromId = from.ReadInt32();
			Date = from.ReadInt32();
			if (HasChannelId) ChannelId = from.ReadInt32();
			if (HasChannelPost) ChannelPost = from.ReadInt32();
			if (HasPostAuthor) PostAuthor = from.ReadString();
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0xFADFF4AC);
			to.Write((Int32)Flags);
			if (HasFromId) to.Write(FromId.Value);
			to.Write(Date);
			if (HasChannelId) to.Write(ChannelId.Value);
			if (HasChannelPost) to.Write(ChannelPost.Value);
			if (HasPostAuthor) to.Write(PostAuthor);
		}

		private void UpdateFlags()
		{
			HasFromId = FromId != null;
			HasChannelId = ChannelId != null;
			HasChannelPost = ChannelPost != null;
			HasPostAuthor = PostAuthor != null;
		}
	}
}