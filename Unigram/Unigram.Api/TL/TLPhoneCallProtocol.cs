// <auto-generated/>
using System;
using Telegram.Api.Native.TL;

namespace Telegram.Api.TL
{
	public partial class TLPhoneCallProtocol : TLObject 
	{
		[Flags]
		public enum Flag : Int32
		{
			UdpP2p = (1 << 0),
			UdpReflector = (1 << 1),
		}

		public bool IsUdpP2p { get { return Flags.HasFlag(Flag.UdpP2p); } set { Flags = value ? (Flags | Flag.UdpP2p) : (Flags & ~Flag.UdpP2p); } }
		public bool IsUdpReflector { get { return Flags.HasFlag(Flag.UdpReflector); } set { Flags = value ? (Flags | Flag.UdpReflector) : (Flags & ~Flag.UdpReflector); } }

		public Flag Flags { get; set; }
		public Int32 MinLayer { get; set; }
		public Int32 MaxLayer { get; set; }

		public TLPhoneCallProtocol() { }
		public TLPhoneCallProtocol(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.PhoneCallProtocol; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			MinLayer = from.ReadInt32();
			MaxLayer = from.ReadInt32();
		}

		public override void Write(TLBinaryWriter to)
		{
			to.WriteInt32((Int32)Flags);
			to.WriteInt32(MinLayer);
			to.WriteInt32(MaxLayer);
		}
	}
}