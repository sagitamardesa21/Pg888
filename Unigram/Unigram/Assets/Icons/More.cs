//
// Copyright Fela Ameghino 2015-2023
//
// Distributed under the GNU General Public License v3.0. (See accompanying
// file LICENSE or copy at https://www.gnu.org/licenses/gpl-3.0.txt)
//
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.0-build.5+g109463c06a
//       
//       Command:
//           LottieGen -DisableTranslationOptimizer -Language CSharp -Public -WinUIVersion 2.7 -InputFile more.json
//       
//       Input file:
//           more.json (4199 bytes created 13:47+01:00 Mar 26 2022)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   136 |
// |--------------------------+-------|
// | Expression animators     |    16 |
// | KeyFrame animators       |    10 |
// | Reference parameters     |    17 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    10 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     2 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     8 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace Unigram.Assets.Icons
{
    // Name:        more
    // Frame rate:  60 fps
    // Frame count: 45
    // Duration:    750.0 mS
    sealed class More
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.750 seconds.
        internal const long c_durationTicks = 7500000;

        internal CompositionPropertySet _themeProperties;
        internal Color _themeForeground;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            EnsureThemeProperties(compositor);

            diagnostics = null;

            if (More_AnimatedVisual.IsRuntimeCompatible())
            {
                var res =
                    new More_AnimatedVisual(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        Vector4 ColorAsVector4(Color color)
        {
            return new Vector4(color.R, color.G, color.B, color.A);
        }


        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4(_themeForeground));
            }

            return _themeProperties;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 45d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 45d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "PointerOverToPressed_Start", 0.0 },
                { "PointerOverToPressed_End", 1 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class More_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 7500000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _colorBrush_White;
            CompositionContainerShape _containerShape_2;
            CompositionContainerShape _containerShape_4;
            CompositionContainerShape _containerShape_6;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            // - - - - - - - Shape tree root for layer: more
            // - - - - ShapeGroup: best
            // - - Path 1
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-3.75F, 0F));
                    builder.AddCubicBezier(new Vector2(-3.75F, 0.689999998F), new Vector2(-4.30999994F, 1.25F), new Vector2(-5F, 1.25F));
                    builder.AddCubicBezier(new Vector2(-5.69000006F, 1.25F), new Vector2(-6.25F, 0.689999998F), new Vector2(-6.25F, 0F));
                    builder.AddCubicBezier(new Vector2(-6.25F, -0.689999998F), new Vector2(-5.69000006F, -1.25F), new Vector2(-5F, -1.25F));
                    builder.AddCubicBezier(new Vector2(-4.30999994F, -1.25F), new Vector2(-3.75F, -0.689999998F), new Vector2(-3.75F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Shape tree root for layer: more
            // - - - - ShapeGroup: is the
            // - - Path 2
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1.25F, 0F));
                    builder.AddCubicBezier(new Vector2(1.25F, 0.689999998F), new Vector2(0.689999998F, 1.25F), new Vector2(0F, 1.25F));
                    builder.AddCubicBezier(new Vector2(-0.689999998F, 1.25F), new Vector2(-1.25F, 0.689999998F), new Vector2(-1.25F, 0F));
                    builder.AddCubicBezier(new Vector2(-1.25F, -0.689999998F), new Vector2(-0.689999998F, -1.25F), new Vector2(0F, -1.25F));
                    builder.AddCubicBezier(new Vector2(0.689999998F, -1.25F), new Vector2(1.25F, -0.689999998F), new Vector2(1.25F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - - Shape tree root for layer: more
            // - - - - ShapeGroup: fela
            // - - Path 3
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(5F, 1.25F));
                    builder.AddCubicBezier(new Vector2(5.69000006F, 1.25F), new Vector2(6.25F, 0.689999998F), new Vector2(6.25F, 0F));
                    builder.AddCubicBezier(new Vector2(6.25F, -0.689999998F), new Vector2(5.69000006F, -1.25F), new Vector2(5F, -1.25F));
                    builder.AddCubicBezier(new Vector2(4.30999994F, -1.25F), new Vector2(3.75F, -0.689999998F), new Vector2(3.75F, 0F));
                    builder.AddCubicBezier(new Vector2(3.75F, 0.689999998F), new Vector2(4.30999994F, 1.25F), new Vector2(5F, 1.25F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_White()
            {
                var result = _colorBrush_White = _c.CreateColorBrush();
                BindProperty(result, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Shape tree root for layer: more
            CompositionContainerShape ContainerShape_0()
            {
                var result = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(10F, 10F);
                result.Offset = new Vector2(90F, 90F);
                result.RotationAngleInDegrees = 0F;
                result.Scale = new Vector2(10F, 10F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Shape tree root for layer: more
            CompositionContainerShape ContainerShape_1()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: best
                shapes.Add(ContainerShape_2());
                // ShapeGroup: is the
                shapes.Add(ContainerShape_4());
                // ShapeGroup: fela
                shapes.Add(ContainerShape_6());
                return result;
            }

            // - - Shape tree root for layer: more
            // ShapeGroup: best
            CompositionContainerShape ContainerShape_2()
            {
                if (_containerShape_2 != null) { return _containerShape_2; }
                var result = _containerShape_2 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(-5F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_3());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: best
            CompositionContainerShape ContainerShape_3()
            {
                var result = _c.CreateContainerShape();
                // Path 1
                result.Shapes.Add(SpriteShape_0());
                return result;
            }

            // - - Shape tree root for layer: more
            // ShapeGroup: is the
            CompositionContainerShape ContainerShape_4()
            {
                if (_containerShape_4 != null) { return _containerShape_4; }
                var result = _containerShape_4 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(0F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_5());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: is the
            CompositionContainerShape ContainerShape_5()
            {
                var result = _c.CreateContainerShape();
                // Path 2
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - - Shape tree root for layer: more
            // ShapeGroup: fela
            CompositionContainerShape ContainerShape_6()
            {
                if (_containerShape_6 != null) { return _containerShape_6; }
                var result = _containerShape_6 = _c.CreateContainerShape();
                result.CenterPoint = new Vector2(5F, 0F);
                result.RotationAngleInDegrees = 0F;
                result.Shapes.Add(ContainerShape_7());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: fela
            CompositionContainerShape ContainerShape_7()
            {
                var result = _c.CreateContainerShape();
                // Path 3
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // - - - - - Shape tree root for layer: more
            // - - ShapeGroup: best
            // Path 1
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - - - - Shape tree root for layer: more
            // - - ShapeGroup: is the
            // Path 2
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - - - - Shape tree root for layer: more
            // - - ShapeGroup: fela
            // Path 3
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - - - Shape tree root for layer: more
            // - ShapeGroup: best
            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ColorBrush_White();
                return result;
            }

            // - - - - Shape tree root for layer: more
            // - ShapeGroup: is the
            // Path 2
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape(PathGeometry_1());
                result.FillBrush = ColorBrush_White();
                return result;
            }

            // - - - - Shape tree root for layer: more
            // - ShapeGroup: fela
            // Path 3
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape(PathGeometry_2());
                result.FillBrush = ColorBrush_White();
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                // Shape tree root for layer: more
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                propertySet.InsertScalar("t0", 0F);
                propertySet.InsertScalar("t1", 0F);
                propertySet.InsertScalar("t2", 0F);
                propertySet.InsertScalar("t3", 0F);
                result.Children.InsertAtTop(ContainerVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 10.
                result.InsertKeyFrame(0.222222209F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 10.
                result.InsertKeyFrame(0.222222239F, 0F, StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.444444418F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 20.
                result.InsertKeyFrame(0.444444478F, 0F, StepThenHoldEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.666666627F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            ScalarKeyFrameAnimation t1ScalarAnimation_0_to_1()
            {
                // Frame 5.
                var result = CreateScalarKeyFrameAnimation(0.111111119F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 15.
                result.InsertKeyFrame(0.333333313F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 25.
                result.InsertKeyFrame(0.555555642F, 0F, StepThenHoldEasingFunction());
                // Frame 35.
                result.InsertKeyFrame(0.777777731F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            ScalarKeyFrameAnimation t2ScalarAnimation_0_to_1()
            {
                // Frame 30.
                var result = CreateScalarKeyFrameAnimation(0.666666746F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 40.
                result.InsertKeyFrame(0.888888836F, 1F, _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            ScalarKeyFrameAnimation t3ScalarAnimation_0_to_1()
            {
                // Frame 20.
                var result = CreateScalarKeyFrameAnimation(0.444444478F, 0F, StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 30.
                result.InsertKeyFrame(0.666666627F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Shape tree root for layer: more
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(200F, 200F);
                result.Shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsFinalStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.FinalStep = 1;
                result.IsInitialStepSingleFrame = true;
                result.StepCount = 1;
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: best
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 10.
                result.InsertExpressionKeyFrame(0.222222209F, "Pow(1-_.t0,3)*Vector2(10,10)+(3*Square(1-_.t0)*_.t0*Vector2(10,9.583))+(3*(1-_.t0)*Square(_.t0)*Vector2(10,7.333))+(Pow(_.t0,3)*Vector2(10,7.5))", StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.222222224F, new Vector2(10F, 7.5F), StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.444444448F, new Vector2(10F, 11F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 30.
                result.InsertExpressionKeyFrame(0.666666627F, "Pow(1-_.t3,3)*Vector2(10,11)+(3*Square(1-_.t3)*_.t3*Vector2(10,11.417))+(3*(1-_.t3)*Square(_.t3)*Vector2(10,10.167))+(Pow(_.t3,3)*Vector2(10,10))", StepThenHoldEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.666666687F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: is the
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 5.
                result.InsertKeyFrame(0.111111112F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertExpressionKeyFrame(0.333333313F, "Pow(1-_.t1,3)*Vector2(10,10)+(3*Square(1-_.t1)*_.t1*Vector2(10,9.583))+(3*(1-_.t1)*Square(_.t1)*Vector2(10,7.333))+(Pow(_.t1,3)*Vector2(10,7.5))", StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.333333343F, new Vector2(10F, 7.5F), StepThenHoldEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.555555582F, new Vector2(10F, 11F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 35.
                result.InsertExpressionKeyFrame(0.777777731F, "Pow(1-_.t1,3)*Vector2(10,11)+(3*Square(1-_.t1)*_.t1*Vector2(10,11.417))+(3*(1-_.t1)*Square(_.t1)*Vector2(10,10.167))+(Pow(_.t1,3)*Vector2(10,10))", StepThenHoldEasingFunction());
                // Frame 35.
                result.InsertKeyFrame(0.777777791F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: fela
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                result.SetReferenceParameter("_", _root);
                // Frame 10.
                result.InsertKeyFrame(0.222222224F, new Vector2(10F, 10F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertExpressionKeyFrame(0.444444418F, "Pow(1-_.t0,3)*Vector2(10,10)+(3*Square(1-_.t0)*_.t0*Vector2(10,9.583))+(3*(1-_.t0)*Square(_.t0)*Vector2(10,7.333))+(Pow(_.t0,3)*Vector2(10,7.5))", StepThenHoldEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.444444448F, new Vector2(10F, 7.5F), StepThenHoldEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.666666687F, new Vector2(10F, 11F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 40.
                result.InsertExpressionKeyFrame(0.888888836F, "Pow(1-_.t2,3)*Vector2(10,11)+(3*Square(1-_.t2)*_.t2*Vector2(10,11.417))+(3*(1-_.t2)*Square(_.t2)*Vector2(10,10.167))+(Pow(_.t2,3)*Vector2(10,10))", StepThenHoldEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.888888896F, new Vector2(10F, 10F), StepThenHoldEasingFunction());
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: best
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 5.
                result.InsertKeyFrame(0.111111112F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.333333343F, new Vector2(1.25F, 1.25F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 25.
                result.InsertKeyFrame(0.555555582F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 35.
                result.InsertKeyFrame(0.777777791F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: is the
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.222222224F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.444444448F, new Vector2(1.25F, 1.25F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 30.
                result.InsertKeyFrame(0.666666687F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 40.
                result.InsertKeyFrame(0.888888896F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            // - - - Shape tree root for layer: more
            // ShapeGroup: fela
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.333333343F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.555555582F, new Vector2(1.25F, 1.25F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 35.
                result.InsertKeyFrame(0.777777791F, new Vector2(0.949999988F, 0.949999988F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 44.
                result.InsertKeyFrame(0.977777779F, new Vector2(1F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.600000024F, 0F), new Vector2(0.400000006F, 1F)));
                return result;
            }

            internal More_AnimatedVisual(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(200F, 200F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_2.StartAnimation("Scale", ScaleVector2Animation_0());
                var controller = _containerShape_2.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_2.StartAnimation("Offset", OffsetVector2Animation_0());
                controller = _containerShape_2.TryGetAnimationController("Offset");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_4.StartAnimation("Scale", ScaleVector2Animation_1());
                controller = _containerShape_4.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_4.StartAnimation("Offset", OffsetVector2Animation_1());
                controller = _containerShape_4.TryGetAnimationController("Offset");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_6.StartAnimation("Scale", ScaleVector2Animation_2());
                controller = _containerShape_6.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _containerShape_6.StartAnimation("Offset", OffsetVector2Animation_2());
                controller = _containerShape_6.TryGetAnimationController("Offset");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _root.Properties.StartAnimation("t0", t0ScalarAnimation_0_to_1());
                controller = _root.Properties.TryGetAnimationController("t0");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _root.Properties.StartAnimation("t1", t1ScalarAnimation_0_to_1());
                controller = _root.Properties.TryGetAnimationController("t1");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _root.Properties.StartAnimation("t2", t2ScalarAnimation_0_to_1());
                controller = _root.Properties.TryGetAnimationController("t2");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                _root.Properties.StartAnimation("t3", t3ScalarAnimation_0_to_1());
                controller = _root.Properties.TryGetAnimationController("t3");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
            }

            public void DestroyAnimations()
            {
                _containerShape_2.StopAnimation("Scale");
                _containerShape_2.StopAnimation("Offset");
                _containerShape_4.StopAnimation("Scale");
                _containerShape_4.StopAnimation("Offset");
                _containerShape_6.StopAnimation("Scale");
                _containerShape_6.StopAnimation("Offset");
                _root.Properties.StopAnimation("t0");
                _root.Properties.StopAnimation("t1");
                _root.Properties.StopAnimation("t2");
                _root.Properties.StopAnimation("t3");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
