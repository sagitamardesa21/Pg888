import "Windows.Foundation.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";

#define API_VERSION 1.0

namespace Telegram
{
	namespace Api
	{
		namespace Native
		{

			typedef enum ConnectionType ConnectionType;
			typedef enum ConnectionNeworkType ConnectionNeworkType;
			typedef enum ConnectionState ConnectionState;
			typedef enum BackendType BackendType;
			typedef enum RequestFlag RequestFlag;

			typedef struct Version Version;
			typedef struct ConnectionNetworkStatistics ConnectionNetworkStatistics;

			interface IUserConfiguration;

			runtimeclass Datacenter;
			runtimeclass Connection;
			runtimeclass ConnectionManager;
			runtimeclass MessageResponse;
			runtimeclass MessageError;
			runtimeclass UserConfiguration;
			runtimeclass ProxyCredentials;
			runtimeclass ProxySettings;

			delegate SendRequestCompletedCallback;
			delegate RequestQuickAckReceivedCallback;

			namespace TL
			{

				typedef enum TLConfigFlag TLConfigFlag;
				typedef enum TLDCOptionFlag TLDCOptionFlag;

				interface ITLObject;
				interface ITLBinaryReader;
				interface ITLBinaryWriter;

				runtimeclass TLBinaryReader;
				runtimeclass TLBinaryWriter;
				runtimeclass TLObjectSerializer;
				runtimeclass TLUnparsedObject;
				runtimeclass TLBool;
				runtimeclass TLRPCError;
				runtimeclass TLDCOption;
				runtimeclass TLDisabledFeature;
				runtimeclass TLConfig;
				runtimeclass TLConfigSimple;
				runtimeclass TLIpPort;

				delegate TLObjectConstructorDelegate;

			}

			namespace Diagnostics
			{

				typedef enum LogLevel LogLevel;

				interface ILogger;

			}
		}
	}
}

namespace Telegram
{
	namespace Api
	{
		namespace Native
		{
			declare
			{

				interface Windows.Foundation.Collections.IVectorView<Datacenter*>;
				interface Windows.Foundation.Collections.IVectorView<Connection*>;

			}
		}
	}
}

namespace Telegram
{
	namespace Api
	{
		namespace Native
		{
			namespace TL
			{
				declare
				{

					interface Windows.Foundation.Collections.IVectorView<TLDCOption*>;
					interface Windows.Foundation.Collections.IVectorView<TLDisabledFeature*>;

				}
			}
		}
	}
}

namespace Telegram
{
	namespace Api
	{
		namespace Native
		{
			namespace TL
			{

				[uuid(B93C4F8A-0308-4598-8C0A-52ACC91E45E3)]
				[version(API_VERSION)]
				interface ITLObject : IInspectable
				{
					[propget] HRESULT Constructor([out][retval] UINT32* value);
					HRESULT Read([in] TLBinaryReader* reader);
					HRESULT Write([in] TLBinaryWriter* writer);
				}


				[exclusiveto(TLBinaryReader)]
				[uuid(7F865F69-62F1-4BC9-AD8C-717D0D8DD7F8)]
				[version(API_VERSION)]
				interface ITLBinaryReader : IInspectable requires Windows.Foundation.IClosable
				{
					[propget] HRESULT Position([out][retval] UINT32* value);
					[propput] HRESULT Position([in] UINT32 value);
					[propget] HRESULT UnconsumedBufferLength([out][retval] UINT32* value);
					HRESULT ReadByte([out][retval] BYTE* value);
					HRESULT ReadInt16([out][retval] INT16* value);
					HRESULT ReadUInt16([out][retval] UINT16* value);
					HRESULT ReadInt32([out][retval] INT32* value);
					HRESULT ReadUInt32([out][retval] UINT32* value);
					HRESULT ReadInt64([out][retval] INT64* value);
					HRESULT ReadUInt64([out][retval] UINT64* value);
					HRESULT ReadBoolean([out][retval] boolean* value);
					HRESULT ReadString([out][retval] HSTRING* value);
					HRESULT ReadByteArray([out] UINT32* __valueSize,[out][retval][size_is(, *__valueSize)] BYTE** value);
					HRESULT ReadRawBuffer([in] UINT32 __valueSize, [in][size_is(__valueSize)] BYTE* value);
					HRESULT ReadDouble([out][retval] double* value);
					HRESULT ReadFloat([out][retval] float* value);
					HRESULT ReadObject([out][retval] ITLObject** value);
					HRESULT ReadVector([out] UINT32* __valueSize, [out][retval][size_is(, *__valueSize)] ITLObject*** value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLBinaryReader
				{
					[default] interface ITLBinaryReader;
				}


				[exclusiveto(TLBinaryWriter)]
				[uuid(732B4B01-0603-4ADB-8F29-24096FCDF7C6)]
				[version(API_VERSION)]
				interface ITLBinaryWriter : IInspectable requires Windows.Foundation.IClosable
				{
					[propget] HRESULT Position([out][retval] UINT32* value);
					[propput] HRESULT Position([in] UINT32 value);
					[propget] HRESULT UnstoredBufferLength([out][retval] UINT32* value);
					HRESULT WriteByte([in] BYTE value);
					HRESULT WriteInt16([in] INT16 value);
					HRESULT WriteUInt16([in] UINT16 value);
					HRESULT WriteInt32([in] INT32 value);
					HRESULT WriteUInt32([in] UINT32 value);
					HRESULT WriteInt64([in] INT64 value);
					HRESULT WriteUInt64([in] UINT64 value);
					HRESULT WriteBoolean([in] boolean value);
					HRESULT WriteString([in] HSTRING value);
					HRESULT WriteByteArray([in] UINT32 __valueSize,[in][size_is(__valueSize)] BYTE* value);
					HRESULT WriteRawBuffer([in] UINT32 __valueSize, [in][size_is(__valueSize)] BYTE* value);
					HRESULT WriteDouble([in] double value);
					HRESULT WriteFloat([in] float value);
					HRESULT WriteObject([in] ITLObject* value);
					HRESULT WriteVector([in] UINT32 __valueSize, [in][size_is(__valueSize)] ITLObject** value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLBinaryWriter
				{
					[default] interface ITLBinaryWriter;
				}


				[uuid(4A716007-A9C4-4E26-88F4-91DD8800413F)]
				[version(API_VERSION)]
				delegate HRESULT TLObjectConstructorDelegate([out][retval] Telegram.Api.Native.TL.ITLObject** value);

				[exclusiveto(TLObjectSerializer)]
				[uuid(3AD8B674-5A82-4CC3-A1D6-9BBBF550EC27)]
				[version(API_VERSION)]
				interface ITLObjectSerializerStatics : IInspectable
				{
					HRESULT Serialize([in]ITLObject* object,[out][retval]Windows.Storage.Streams.IBuffer** value);
					HRESULT Deserialize([in] Windows.Storage.Streams.IBuffer* buffer,[out][retval] ITLObject** value);
					[overload("CreateReader"), default_overload] HRESULT CreateReaderFromBuffer([in] Windows.Storage.Streams.IBuffer* buffer, [out][retval] TLBinaryReader** value);
					[overload("CreateReader")] HRESULT CreateReaderFromFile([in] Windows.Storage.StorageFile* file, [out][retval] TLBinaryReader** value);
					[overload("CreateReader")] HRESULT CreateReaderFromFileName([in] HSTRING fileName, [out][retval] TLBinaryReader** value);
					[overload("CreateWriter"), default_overload] HRESULT CreateWriterFromBuffer([in] Windows.Storage.Streams.IBuffer* buffer, [out][retval] TLBinaryWriter** value);
					[overload("CreateWriter")] HRESULT CreateWriterFromFile([in] Windows.Storage.StorageFile* file, [out][retval] TLBinaryWriter** value);
					[overload("CreateWriter")] HRESULT CreateWriterFromFileName([in] HSTRING fileName, [out][retval] TLBinaryWriter** value);
					HRESULT GetObjectSize([in]ITLObject* object,[out][retval] UINT32* value);
					HRESULT RegisterObjectConstructor([in] UINT32 constructor,[in] TLObjectConstructorDelegate* constructorDelegate);
				}

				[exclusiveto(TLObjectSerializer)]
				[uuid(99B0AD68-1843-4F3F-A2A9-9B0144912557)]
				[version(API_VERSION)]
				interface ITLObjectSerializer : IInspectable
				{
				}

				[static(ITLObjectSerializerStatics, API_VERSION)]
				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLObjectSerializer
				{
					[default] interface ITLObjectSerializer;
				}


				[exclusiveto(TLUnparsedObject)]
				[uuid(0598B677-5169-42AB-92FA-815F645BBD02)]
				[version(API_VERSION)]
				interface ITLUnparsedObject : IInspectable
				{
					[propget] HRESULT Reader([out][retval] Telegram.Api.Native.TL.TLBinaryReader** value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLUnparsedObject
				{
					[default] interface ITLUnparsedObject;
					interface ITLObject;
				}


				/*[exclusiveto(TLBool)]
				[uuid(26E8EE35-724F-499C-8028-D3DBD594029D)]
				[version(API_VERSION)]
				interface ITLBool : IInspectable
				{
					[propget] HRESULT Value([out][retval] boolean* value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLBool
				{
					[default] interface ITLBool;
					interface ITLObject;
				}*/


				[exclusiveto(TLRPCError)]
				[uuid(7F082942-3017-44C9-9E5D-87EDCFB7E209)]
				[version(API_VERSION)]
				interface ITLRPCErrorFactory : IInspectable
				{
					HRESULT CreateInstance([in] INT32 errorCode, [in] HSTRING errorMessage, [out][retval] TLRPCError** value);
				}

				[exclusiveto(TLRPCError)]
				[uuid(7E992965-E9B1-4804-9C1C-E578B5C397AF)]
				[version(API_VERSION)]
				interface ITLRPCError : IInspectable
				{
					[propget] HRESULT ErrorCode([out][retval] INT32* value);
					[propget] HRESULT ErrorMessage([out][retval] HSTRING* value);
				}

				[activatable(ITLRPCErrorFactory, API_VERSION)]
				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLRPCError
				{
					[default] interface ITLRPCError;
					interface ITLObject;
				}


				[version(API_VERSION)]
				enum TLDCOptionFlag
				{
					None = 0,
					IPv6 = 1,
					MediaOnly = 2, 
					TCPOnly = 4,
					CDN = 8,
					Static = 16
				};

				cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(ABI::Telegram::Api::Native::TL::TLDCOptionFlag);")


				[exclusiveto(TLDCOption)]
				[uuid(BFE5D247-DDAE-4EDD-AC25-894FD115E937)]
				[version(API_VERSION)]
				interface ITLDCOption : IInspectable
				{
					[propget] HRESULT Flags([out][retval] TLDCOptionFlag* value);
					[propget] HRESULT Id([out][retval] INT32* value);
					[propget] HRESULT IpAddress([out][retval] HSTRING* value);
					[propget] HRESULT Port([out][retval] INT32* value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLDCOption
				{
					[default] interface ITLDCOption;
					interface ITLObject;
				}


				[exclusiveto(TLDisabledFeature)]
				[uuid(8F00ADB9-FC7C-4459-9FB7-5B6AED6E7910)]
				[version(API_VERSION)]
				interface ITLDisabledFeature : IInspectable
				{
					[propget] HRESULT Feature([out][retval] HSTRING* value);
					[propget] HRESULT Description([out][retval] HSTRING* value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLDisabledFeature
				{
					[default] interface ITLDisabledFeature;
					interface ITLObject;
				}


				[version(API_VERSION)]
				enum TLConfigFlag
				{
					None = 0,	
					TmpSessions = 1,
					PhoneCallsEnabled = 2,
					SuggestedLangCode = 4,
					LangPackVersion = 4
				};

				cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(ABI::Telegram::Api::Native::TL::TLConfigFlag);")


				[exclusiveto(TLConfig)]
				[uuid(0033FE25-9FD6-4F73-8D3B-9F1B2BF79483)]
				[version(API_VERSION)]
				interface ITLConfigStatics : IInspectable
				{
					[propget] HRESULT Default([out][retval] TLConfig** value);
				}

				[exclusiveto(TLConfig)]
				[uuid(3368AE99-FD5C-44C9-A780-3935276EC61F)]
				[version(API_VERSION)]
				interface ITLConfig : IInspectable
				{
					[propget] HRESULT Flags([out][retval] TLConfigFlag* value);
					[propget] HRESULT Date([out][retval] INT32* value);
					[propget] HRESULT Expires([out][retval] INT32* value);
					[propget] HRESULT TestMode([out][retval] boolean* value);
					[propget] HRESULT ThisDc([out][retval] INT32* value);
					[propget] HRESULT DCOptions([out][retval] Windows.Foundation.Collections.IVectorView<TLDCOption*>** value);
					[propget] HRESULT ChatSizeMax([out][retval] INT32* value);
					[propget] HRESULT MegaGroupSizeMax([out][retval] INT32* value);
					[propget] HRESULT ForwardedCountMax([out][retval] INT32* value);
					[propget] HRESULT OnlineUpdatePeriodMs([out][retval] INT32* value);
					[propget] HRESULT OfflineBlurTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT OfflineIdleTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT OnlineCloudTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT NotifyCloudDelayMs([out][retval] INT32* value);
					[propget] HRESULT NotifyDefaultDelayMs([out][retval] INT32* value);
					[propget] HRESULT ChatBigSize([out][retval] INT32* value);
					[propget] HRESULT PushChatPeriodMs([out][retval] INT32* value);
					[propget] HRESULT PushChatLimit([out][retval] INT32* value);
					[propget] HRESULT SavedGifsLimit([out][retval] INT32* value);
					[propget] HRESULT EditTimeLimit([out][retval] INT32* value);
					[propget] HRESULT RatingEDecay([out][retval] INT32* value);
					[propget] HRESULT StickersRecentLimit([out][retval] INT32* value);
					[propget] HRESULT StickersFavedLimit([out][retval] INT32* value);
					[propget] HRESULT ChannelsReadMediaPeriod([out][retval] INT32* value);
					[propget] HRESULT TmpSessions([out][retval] Windows.Foundation.IReference<INT32>** value);
					[propget] HRESULT PinnedDialogsCountMax([out][retval] INT32* value);
					[propget] HRESULT CallReceiveTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT CallRingTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT CallConnectTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT CallPacketTimeoutMs([out][retval] INT32* value);
					[propget] HRESULT MeUrlPrefix([out][retval] HSTRING* value);
					[propget] HRESULT SuggestedLangCode([out][retval] HSTRING* value);
					[propget] HRESULT LangPackVersion([out][retval] Windows.Foundation.IReference<INT32>** value);
					[propget] HRESULT DisabledFeatures([out][retval] Windows.Foundation.Collections.IVectorView<TLDisabledFeature*>** value);
				}

				[static(ITLConfigStatics, API_VERSION)]
				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLConfig
				{
					[default] interface ITLConfig;
					interface ITLObject;
				}


				[exclusiveto(TLConfigSimple)]
				[uuid(252D51FC-A33F-482F-84C4-506210A75B55)]
				[version(API_VERSION)]
				interface ITLConfigSimple : IInspectable
				{
					[propget] HRESULT Date([out][retval] INT32* value);
					[propget] HRESULT Expires([out][retval] INT32* value);
					[propget] HRESULT DCId([out][retval] INT32* value);
					[propget] HRESULT IpPortList([out][retval] Windows.Foundation.Collections.IVectorView<TLIpPort*>** value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLConfigSimple
				{
					[default] interface ITLConfigSimple;
					interface ITLObject;
				}


				[exclusiveto(TLIpPort)]
				[uuid(DEB3CCDA-745D-448C-A138-6DEC31E1ABD1)]
				[version(API_VERSION)]
				interface ITLIpPort : IInspectable
				{
					[propget] HRESULT Ipv4([out][retval] INT32* value);
					[propget] HRESULT Port([out][retval] INT32* value);
				}

				[marshaling_behavior(agile)]
				[threading(both)]
				[version(API_VERSION)]
				runtimeclass TLIpPort
				{
					[default] interface ITLIpPort;
					interface ITLObject;
				}

			}

			namespace Diagnostics
			{

				[version(API_VERSION)]
				enum LogLevel
				{
					Critical = 1,
					Error = 2,
					Warning = 3,
					Information = 4
				};


				[uuid(2736B8C6-7A1C-48C2-8A87-ABC9D783124D)]
				[version(API_VERSION)]
				interface ILogger : IInspectable
				{
					HRESULT Log([in]LogLevel logLevel, [in]HSTRING message);
				}

			}


			[version(API_VERSION)]
			struct Version
			{
				UINT32 ProtocolVersion;
				UINT32 Layer;
				UINT32 SettingsVersion;
			};


			[version(API_VERSION)]
			struct ConnectionNetworkStatistics
			{
				UINT64 TotalBytesSent;
				UINT64 TotalBytesReceived;
			};


			[version(API_VERSION)]
			enum ConnectionType
			{
				Generic = 1,
				Download = 2,
				Upload = 4
			};

			[version(API_VERSION)]
			enum ConnectionNeworkType
			{
				None = 0,
				Mobile = 1,
				WiFi = 2,
				Roaming = 3
			};

			[version(API_VERSION)]
			enum BackendType
			{
				Default = 0,
				Test = 1
			};

			[version(API_VERSION)]
			enum ConnectionState
			{
				Connecting = 1,
				WaitingForNetwork = 2,
				Connected = 3
			};

			[version(API_VERSION)]
			enum RequestFlag
			{
				None = 0,
				EnableUnauthorized = 1,
				FailOnServerError = 2,
				CanCompress = 4,
				WithoutLogin = 8,
				TryDifferentDc = 16,
				ForceDownload = 32,
				InvokeAfter = 64,
				RequiresQuickAck = 128,
				Immediate = 256
			};

			cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(ABI::Telegram::Api::Native::RequestFlag);")
			cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(ABI::Telegram::Api::Native::ConnectionType);")


			[exclusiveto(MessageResponse)]
			[uuid(7C4C00BC-3D6A-4623-B6BB-C8CF22F5A839)]
			[version(API_VERSION)]
			interface IMessageResponse : IInspectable
			{
				[propget] HRESULT MessageId([out][retval] INT64* value);
				[propget] HRESULT ConnectionType([out][retval] ConnectionType* value);
				[propget] HRESULT Object([out][retval] Telegram.Api.Native.TL.ITLObject** value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass MessageResponse
			{
				[default] interface IMessageResponse;
			}


			[exclusiveto(MessageError)]
			[uuid(9E438BCC-CB87-4948-8EA4-214C8C2AA3B1)]
			[version(API_VERSION)]
			interface IMessageError : IInspectable
			{
				[propget] HRESULT Exception([out][retval] HRESULT* value);
				[propget] HRESULT Code([out][retval] INT32* value);
				[propget] HRESULT Text([out][retval] HSTRING* value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass MessageError
			{
				[default] interface IMessageError;
			}


			[uuid(CA172FA9-416D-4BD9-AB8C-B8696391D38F)]
			[version(API_VERSION)]
			delegate HRESULT SendRequestCompletedCallback([in] MessageResponse* response, [in] MessageError* error);

			[uuid(8F88DCA2-FC97-4C94-B564-3DDBF1675477)]
			[version(API_VERSION)]
			delegate HRESULT RequestQuickAckReceivedCallback();


			[exclusiveto(UserConfiguration)]
			[uuid(27960B7A-14F2-4F63-AA65-6201B9A190EC)]
			[version(API_VERSION)]
			interface IUserConfiguration : IInspectable
			{
				[propget] HRESULT AppId([out][retval] INT32* value);
				[propput] HRESULT AppId([in] INT32 value);
				[propget] HRESULT DeviceModel([out][retval] HSTRING* value);
				[propput] HRESULT DeviceModel([in] HSTRING value);
				[propget] HRESULT SystemVersion([out][retval] HSTRING* value);
				[propput] HRESULT SystemVersion([in] HSTRING value);
				[propget] HRESULT AppVersion([out][retval] HSTRING* value);
				[propput] HRESULT AppVersion([in] HSTRING value);
				[propget] HRESULT Language([out][retval] HSTRING* value);
				[propput] HRESULT Language([in] HSTRING value);
				[propget] HRESULT LangPack([out][retval] HSTRING* value);
				[propput] HRESULT LangPack([in] HSTRING value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass UserConfiguration
			{
				[default] interface IUserConfiguration;
			}


			[exclusiveto(ProxyCredentials)]
			[uuid(54973C12-DC69-4ACF-BD5B-DD0AF572E78D)]
			[version(API_VERSION)]
			interface IProxyCredentials : IInspectable
			{
				[propget] HRESULT UserName([out][retval] HSTRING* value);
				[propget] HRESULT Password([out][retval] HSTRING* value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass ProxyCredentials
			{
				[default] interface IProxyCredentials;
			}


			[exclusiveto(ProxySettings)]
			[uuid(2DA09C89-E8AB-46F8-8624-36248D63C429)]
			[version(API_VERSION)]
			interface IProxySettingsFactory : IInspectable
			{
				[overload("CreateInstance")] HRESULT CreateInstance([in] HSTRING host,[in] UINT32 port,[out][retval] ProxySettings** value);
				[overload("CreateInstance")] HRESULT CreateInstanceWithCredentials([in] HSTRING host,[in] UINT32 port,[in] HSTRING userName,[in] HSTRING password,[out][retval] ProxySettings** value);
			}


			[exclusiveto(ProxySettings)]
			[uuid(CA79C322-DDC8-4959-B472-25B6AA8C5F57)]
			[version(API_VERSION)]
			interface IProxySettings : IInspectable
			{
				[propget] HRESULT Host([out][retval] HSTRING* value);
				[propget] HRESULT Port([out][retval] UINT32* value);
				[propget] HRESULT Credentials([out][retval] ProxyCredentials** value);
			}

			//[static(IProxySettingsStatics, API_VERSION)]
			[activatable(IProxySettingsFactory, API_VERSION)]
			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass ProxySettings
			{
				[default] interface IProxySettings;
			}


			[exclusiveto(Datacenter)]
			[uuid(ACBC9624-7B96-417D-A9F9-A7F93C195C86)]
			[version(API_VERSION)]
			interface IDatacenter : IInspectable
			{
				[propget] HRESULT Id([out][retval] INT32* value);
				[propget] HRESULT Connections([out][retval] Windows.Foundation.Collections.IVectorView<Connection*>** value);
				HRESULT GetCurrentAddress([in] ConnectionType connectionType,[in] boolean ipv6,[out][retval] HSTRING* value);
				HRESULT GetCurrentPort([in] ConnectionType connectionType,[in] boolean ipv6,[out][retval] UINT32* value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass Datacenter
			{
				[default] interface IDatacenter;
			}


			[exclusiveto(Connection)]
			[uuid(108FB951-3940-4FF5-A8A1-ED449D305029)]
			[version(API_VERSION)]
			interface IConnection : IInspectable
			{
				[propget] HRESULT Datacenter([out][retval] Datacenter** value);
				[propget] HRESULT Type([out][retval] ConnectionType* value);
				[propget] HRESULT CurrentNetworkType([out][retval] ConnectionNeworkType* value);
				[propget] HRESULT SessionId([out][retval] INT64* value);
				[propget] HRESULT IsConnected([out][retval] boolean* value);
			}

			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass Connection
			{
				[default] interface IConnection;
			}


			[exclusiveto(ConnectionManager)]
			[uuid(6945B11D-9663-4E6E-B866-7A1AB6A98349)]
			[version(API_VERSION)]
			interface IConnectionManagerStatics : IInspectable
			{
				[propget] HRESULT Instance([out][retval] ConnectionManager** value);
				[propget] HRESULT Version([out][retval] Version* value);
				[propget] HRESULT DefaultDatacenterId([out][retval] INT32* value);
			}

			[exclusiveto(ConnectionManager)]
			[uuid(1C986C1D-56D3-4DA5-8027-5240F0CD2DFF)]
			[version(API_VERSION)]
			interface IConnectionManager : IInspectable
			{
				[eventadd] HRESULT SessionCreated([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, IInspectable*>* handler, [out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT SessionCreated([in] EventRegistrationToken token);
				[eventadd] HRESULT AuthenticationRequired([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, IInspectable*>* handler, [out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT AuthenticationRequired([in] EventRegistrationToken token);
				[eventadd] HRESULT UserConfigurationRequired([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, UserConfiguration*>* handler, [out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT UserConfigurationRequired([in] EventRegistrationToken token);
				[eventadd] HRESULT CurrentNetworkTypeChanged([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, IInspectable*>* handler,[out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT CurrentNetworkTypeChanged([in] EventRegistrationToken token);
				[eventadd] HRESULT ConnectionStateChanged([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, IInspectable*>* handler,[out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT ConnectionStateChanged([in] EventRegistrationToken token);
				[eventadd] HRESULT UnprocessedMessageReceived([in] Windows.Foundation.TypedEventHandler<ConnectionManager*, MessageResponse*>* handler,[out][retval] EventRegistrationToken* token);
				[eventremove] HRESULT UnprocessedMessageReceived([in] EventRegistrationToken token);
				[propget] HRESULT ConnectionState([out][retval] ConnectionState* value);
				[propget] HRESULT CurrentNetworkType([out][retval] ConnectionNeworkType* value);
				[propget] HRESULT CurrentDatacenter([out][retval] Datacenter** value);
				[propget] HRESULT CurrentBackendType([out][retval] BackendType* value);
				[propget] HRESULT CurrentRoundTripTime([out][retval] Windows.Foundation.TimeSpan* value);
				[propget] HRESULT IsIPv6Enabled([out][retval] boolean* value);
				[propget] HRESULT IsNetworkAvailable([out][retval] boolean* value);
				[propget] HRESULT UserId([out][retval] INT32* value);
				[propput] HRESULT UserId([in] INT32 value);
				[propget] HRESULT ProxySettings([out][retval] ProxySettings** value);
				[propput] HRESULT ProxySettings([in] ProxySettings* value);
				[propget] HRESULT TimeDifference([out][retval] INT32* value);
				[propget] HRESULT Datacenters([out][retval] Windows.Foundation.Collections.IVectorView<Datacenter*>** value);
				[propget] HRESULT Logger([out][retval] Telegram.Api.Native.Diagnostics.ILogger** value);
				[propput] HRESULT Logger([in] Telegram.Api.Native.Diagnostics.ILogger* value);
				[overload("SendRequest")] HRESULT SendRequest([in] Telegram.Api.Native.TL.ITLObject* obj,[in] SendRequestCompletedCallback* onCompleted,[in] RequestQuickAckReceivedCallback* onQuickAckReceivedCallback,
					[in] ConnectionType connectionType,[out][retval] INT32* value);
				[overload("SendRequest")] HRESULT SendRequestWithDatacenter([in] Telegram.Api.Native.TL.ITLObject* obj, [in] SendRequestCompletedCallback* onCompleted, [in] RequestQuickAckReceivedCallback* onQuickAckReceivedCallback,
					[in] INT32 datacenterId, [in] ConnectionType connectionType, [out][retval] INT32* value);
				[overload("SendRequest")] HRESULT SendRequestWithFlags([in] Telegram.Api.Native.TL.ITLObject* obj,[in] SendRequestCompletedCallback* onCompleted,[in] RequestQuickAckReceivedCallback* onQuickAckReceivedCallback,
					[in] INT32 datacenterId,[in] ConnectionType connectionType,[in] RequestFlag flags,[out][retval] INT32* value);
				HRESULT CancelRequest([in] INT32 requestToken,[in] boolean notifyServer,[out][retval] boolean* value);
				HRESULT UpdateDatacenters();
				HRESULT Reset();
				HRESULT SwitchBackend();
				HRESULT GetConnectionStatistics([in] ConnectionType connectionType,[out][retval] ConnectionNetworkStatistics* value);
			}

			[static(IConnectionManagerStatics, API_VERSION)]
			[marshaling_behavior(agile)]
			[threading(both)]
			[version(API_VERSION)]
			runtimeclass ConnectionManager
			{
				[default] interface IConnectionManager;
			}

		}
	}
}