//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2-build.24+g767465b091
//       
//       Command:
//           LottieGen -GenerateColorBindings -Language CSharp -Namespace Telegram.Assets.Icons -Public -WinUIVersion 2.8 -InputFile TeachingTipLinkCopied.json
//       
//       Input file:
//           TeachingTipLinkCopied.json (13752 bytes created 14:40+04:00 Apr 13 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________________________
// |       Object stats       | UAP v15 count | UAP v11 count | UAP v7 count |
// |__________________________|_______________|_______________|______________|
// | All CompositionObjects   |            73 |            95 |           79 |
// |--------------------------+---------------+---------------+--------------|
// | Expression animators     |             2 |            13 |           11 |
// | KeyFrame animators       |            12 |            12 |           10 |
// | Reference parameters     |             2 |            13 |           11 |
// | Expression operations    |             4 |             4 |            4 |
// |--------------------------+---------------+---------------+--------------|
// | Animated brushes         |             1 |             1 |            1 |
// | Animated gradient stops  |             - |             - |            - |
// | ExpressionAnimations     |             2 |             2 |            2 |
// | PathKeyFrameAnimations   |             2 |             2 |            - |
// |--------------------------+---------------+---------------+--------------|
// | ContainerVisuals         |             1 |             1 |            1 |
// | ShapeVisuals             |             1 |             1 |            1 |
// |--------------------------+---------------+---------------+--------------|
// | ContainerShapes          |             2 |             2 |            2 |
// | CompositionSpriteShapes  |             2 |             2 |            2 |
// |--------------------------+---------------+---------------+--------------|
// | Brushes                  |             1 |             1 |            1 |
// | Gradient stops           |             - |             - |            - |
// | CompositionVisualSurface |             - |             - |            - |
// ---------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace Telegram.Assets.Icons
{
    // Name:        Comp 1
    // Frame rate:  60 fps
    // Frame count: 120
    // Duration:    2000.0 mS
    // ___________________________________________________________
    // | Theme property |   Accessor   | Type  |  Default value  |
    // |________________|______________|_______|_________________|
    // | #FFFFFF        | Foreground   | Color | #FFFFFFFF White |
    // -----------------------------------------------------------
    public sealed class TeachingTipLinkCopied
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 2.000 seconds.
        internal const long c_durationTicks = 20000000;

        // Theme property: Foreground.
        internal static readonly Color c_themeForeground = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;
        Color _themeForeground = c_themeForeground;

        // Theme properties.
        public Color Foreground
        {
            get => _themeForeground;
            set
            {
                _themeForeground = value;
                if (_themeProperties != null)
                {
                    _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)_themeForeground));
                }
            }
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Foreground", ColorAsVector4((Color)Foreground));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (TeachingTipLinkCopied_AnimatedVisual_UAPv15.IsRuntimeCompatible())
            {
                var res = 
                    new TeachingTipLinkCopied_AnimatedVisual_UAPv15(
                        compositor,
                        _themeProperties
                        );
                    res.CreateAnimations();
                    return res;
            }

            if (TeachingTipLinkCopied_AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res = 
                    new TeachingTipLinkCopied_AnimatedVisual_UAPv11(
                        compositor,
                        _themeProperties
                        );
                    res.CreateAnimations();
                    return res;
            }

            if (TeachingTipLinkCopied_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res = 
                    new TeachingTipLinkCopied_AnimatedVisual_UAPv7(
                        compositor,
                        _themeProperties
                        );
                    res.CreateAnimations();
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 120d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(20000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 120d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "NormalToChecked_Start", 0.0 },
                { "NormalToChecked_End", 1 },
                { "CheckedToNormal_Start", 1 },
                { "CheckedToNormal_End", 0.0 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Foreground")
            {
                _themeForeground = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class TeachingTipLinkCopied_AnimatedVisual_UAPv15 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            AnimationController _animationController_0;
            CanvasGeometry _geometry_01;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_360;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_02(), Geometry_03(), Geometry_04() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(198F, 57F), new Vector2(198F, -57F), new Vector2(127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(57F, -198F), new Vector2(-57F, -198F), new Vector2(-127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(-198F, -57F), new Vector2(-198F, 57F), new Vector2(-127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(-57F, 198F), new Vector2(57F, 198F), new Vector2(127.5F, 127.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = _geometry_01 = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-51F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-45F, -25.5F), new Vector2(-45F, -18F), new Vector2(-51F, -12F));
                    builder.AddCubicBezier(new Vector2(-51F, -12F), new Vector2(-64.5F, 0F), new Vector2(-64.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-82.5F, 18F), new Vector2(-82.5F, 48F), new Vector2(-64.5F, 66F));
                    builder.AddCubicBezier(new Vector2(-46.5F, 84F), new Vector2(-19.5F, 84F), new Vector2(-1.5F, 67.5F));
                    builder.AddCubicBezier(new Vector2(-1.5F, 67.5F), new Vector2(13.5F, 52.5F), new Vector2(13.5F, 52.5F));
                    builder.AddCubicBezier(new Vector2(19.5F, 46.5F), new Vector2(27F, 46.5F), new Vector2(33F, 52.5F));
                    builder.AddCubicBezier(new Vector2(39F, 58.5F), new Vector2(39F, 66F), new Vector2(33F, 72F));
                    builder.AddCubicBezier(new Vector2(33F, 72F), new Vector2(19.5F, 85.5F), new Vector2(19.5F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-9F, 114F), new Vector2(-55.5F, 114F), new Vector2(-84F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-112.5F, 57F), new Vector2(-112.5F, 10.5F), new Vector2(-84F, -18F));
                    builder.AddCubicBezier(new Vector2(-84F, -18F), new Vector2(-70.5F, -31.5F), new Vector2(-70.5F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-64.5F, -37.5F), new Vector2(-57F, -37.5F), new Vector2(-51F, -31.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-15F, -88.5F));
                    builder.AddCubicBezier(new Vector2(13.5F, -117F), new Vector2(60F, -117F), new Vector2(88.5F, -88.5F));
                    builder.AddCubicBezier(new Vector2(117F, -60F), new Vector2(116.75F, -13.875F), new Vector2(89.125F, 15.375F));
                    builder.AddCubicBezier(new Vector2(89.125F, 15.375F), new Vector2(75.875F, 29.625F), new Vector2(75.875F, 29.625F));
                    builder.AddCubicBezier(new Vector2(69.875F, 35.625F), new Vector2(63F, 35.4370003F), new Vector2(57F, 30F));
                    builder.AddCubicBezier(new Vector2(50.7130013F, 24.302F), new Vector2(51F, 16.5F), new Vector2(57F, 10.5F));
                    builder.AddCubicBezier(new Vector2(57F, 10.5F), new Vector2(70.5F, -3F), new Vector2(70.5F, -3F));
                    builder.AddCubicBezier(new Vector2(88.5F, -21F), new Vector2(88.5F, -51F), new Vector2(70.5F, -69F));
                    builder.AddCubicBezier(new Vector2(52.5F, -87F), new Vector2(22.5F, -87F), new Vector2(4.5F, -69F));
                    builder.AddCubicBezier(new Vector2(4.5F, -69F), new Vector2(-9F, -55.5F), new Vector2(-9F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-15F, -49.5F), new Vector2(-22.5F, -49.5F), new Vector2(-28.5F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-34.5F, -61.5F), new Vector2(-34.5F, -69F), new Vector2(-28.5F, -75F));
                    builder.AddCubicBezier(new Vector2(-28.5F, -75F), new Vector2(-15F, -88.5F), new Vector2(-15F, -88.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21F, -39F));
                    builder.AddCubicBezier(new Vector2(25.5F, -43.5F), new Vector2(31.5F, -43.5F), new Vector2(36F, -39F));
                    builder.AddCubicBezier(new Vector2(36F, -39F), new Vector2(40.5F, -34.5F), new Vector2(40.5F, -34.5F));
                    builder.AddCubicBezier(new Vector2(45F, -30F), new Vector2(45F, -24F), new Vector2(40.5F, -19.5F));
                    builder.AddCubicBezier(new Vector2(40.5F, -19.5F), new Vector2(14.2229996F, 6.77699995F), new Vector2(14.2229996F, 6.77699995F));
                    builder.AddCubicBezier(new Vector2(14.2229996F, 6.77699995F), new Vector2(13.2639999F, 7.73600006F), new Vector2(13.2639999F, 7.73600006F));
                    builder.AddCubicBezier(new Vector2(13.2639999F, 7.73600006F), new Vector2(13.1590004F, 7.84100008F), new Vector2(13.1590004F, 7.84100008F));
                    builder.AddCubicBezier(new Vector2(13.1590004F, 7.84100008F), new Vector2(11.4329996F, 9.56700039F), new Vector2(11.4329996F, 9.56700039F));
                    builder.AddCubicBezier(new Vector2(11.4329996F, 9.56700039F), new Vector2(-15F, 36F), new Vector2(-15F, 36F));
                    builder.AddCubicBezier(new Vector2(-19.5F, 40.5F), new Vector2(-25.5F, 40.5F), new Vector2(-30F, 36F));
                    builder.AddCubicBezier(new Vector2(-30F, 36F), new Vector2(-34.5F, 31.5F), new Vector2(-34.5F, 31.5F));
                    builder.AddCubicBezier(new Vector2(-39F, 27F), new Vector2(-39F, 21F), new Vector2(-34.5F, 16.5F));
                    builder.AddCubicBezier(new Vector2(-34.5F, 16.5F), new Vector2(-7.40700006F, -10.5930004F), new Vector2(-7.40700006F, -10.5930004F));
                    builder.AddCubicBezier(new Vector2(-7.40700006F, -10.5930004F), new Vector2(-6.06099987F, -11.9390001F), new Vector2(-6.06099987F, -11.9390001F));
                    builder.AddCubicBezier(new Vector2(-6.06099987F, -11.9390001F), new Vector2(-5.89900017F, -12.1009998F), new Vector2(-5.89900017F, -12.1009998F));
                    builder.AddCubicBezier(new Vector2(-5.89900017F, -12.1009998F), new Vector2(-4.24599981F, -13.7539997F), new Vector2(-4.24599981F, -13.7539997F));
                    builder.AddCubicBezier(new Vector2(-4.24599981F, -13.7539997F), new Vector2(21F, -39F), new Vector2(21F, -39F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_05()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_06(), Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-46F, -35F));
                    builder.AddCubicBezier(new Vector2(-40F, -29F), new Vector2(-40F, -21.5F), new Vector2(-46F, -15.5F));
                    builder.AddCubicBezier(new Vector2(-46F, -15.5F), new Vector2(-59.5F, -3.5F), new Vector2(-59.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-77.5F, 14.5F), new Vector2(-77.5F, 44.5F), new Vector2(-59.5F, 62.5F));
                    builder.AddCubicBezier(new Vector2(-41.5F, 80.5F), new Vector2(-14.5F, 80.5F), new Vector2(3.5F, 64F));
                    builder.AddCubicBezier(new Vector2(3.5F, 64F), new Vector2(18.5F, 49F), new Vector2(18.5F, 49F));
                    builder.AddCubicBezier(new Vector2(24.5F, 43F), new Vector2(32F, 43F), new Vector2(38F, 49F));
                    builder.AddCubicBezier(new Vector2(44F, 55F), new Vector2(44F, 62.5F), new Vector2(38F, 68.5F));
                    builder.AddCubicBezier(new Vector2(38F, 68.5F), new Vector2(24.5F, 82F), new Vector2(24.5F, 82F));
                    builder.AddCubicBezier(new Vector2(-4F, 110.5F), new Vector2(-50.5F, 110.5F), new Vector2(-79F, 82F));
                    builder.AddCubicBezier(new Vector2(-107.5F, 53.5F), new Vector2(-107.5F, 7F), new Vector2(-79F, -21.5F));
                    builder.AddCubicBezier(new Vector2(-79F, -21.5F), new Vector2(-65.5F, -35F), new Vector2(-65.5F, -35F));
                    builder.AddCubicBezier(new Vector2(-59.5F, -41F), new Vector2(-52F, -41F), new Vector2(-46F, -35F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-22.5F, -81F));
                    builder.AddCubicBezier(new Vector2(6F, -109.5F), new Vector2(52.5F, -109.5F), new Vector2(81F, -81F));
                    builder.AddCubicBezier(new Vector2(109.5F, -52.5F), new Vector2(109.25F, -6.375F), new Vector2(81.625F, 22.875F));
                    builder.AddCubicBezier(new Vector2(81.625F, 22.875F), new Vector2(68.375F, 37.125F), new Vector2(68.375F, 37.125F));
                    builder.AddCubicBezier(new Vector2(62.375F, 43.125F), new Vector2(55.5F, 42.9370003F), new Vector2(49.5F, 37.5F));
                    builder.AddCubicBezier(new Vector2(43.2130013F, 31.802F), new Vector2(43.5F, 24F), new Vector2(49.5F, 18F));
                    builder.AddCubicBezier(new Vector2(49.5F, 18F), new Vector2(63F, 4.5F), new Vector2(63F, 4.5F));
                    builder.AddCubicBezier(new Vector2(81F, -13.5F), new Vector2(81F, -43.5F), new Vector2(63F, -61.5F));
                    builder.AddCubicBezier(new Vector2(45F, -79.5F), new Vector2(15F, -79.5F), new Vector2(-3F, -61.5F));
                    builder.AddCubicBezier(new Vector2(-3F, -61.5F), new Vector2(-16.5F, -48F), new Vector2(-16.5F, -48F));
                    builder.AddCubicBezier(new Vector2(-22.5F, -42F), new Vector2(-30F, -42F), new Vector2(-36F, -48F));
                    builder.AddCubicBezier(new Vector2(-42F, -54F), new Vector2(-42F, -61.5F), new Vector2(-36F, -67.5F));
                    builder.AddCubicBezier(new Vector2(-36F, -67.5F), new Vector2(-22.5F, -81F), new Vector2(-22.5F, -81F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(17.25F, -34.75F));
                    builder.AddCubicBezier(new Vector2(21.75F, -39.25F), new Vector2(27.75F, -39.25F), new Vector2(32.25F, -34.75F));
                    builder.AddCubicBezier(new Vector2(32.25F, -34.75F), new Vector2(36.75F, -30.25F), new Vector2(36.75F, -30.25F));
                    builder.AddCubicBezier(new Vector2(41.25F, -25.75F), new Vector2(41.25F, -19.75F), new Vector2(36.75F, -15.25F));
                    builder.AddCubicBezier(new Vector2(36.75F, -15.25F), new Vector2(14.2229996F, 6.77699995F), new Vector2(14.2229996F, 6.77699995F));
                    builder.AddCubicBezier(new Vector2(14.2229996F, 6.77699995F), new Vector2(13.2639999F, 7.73600006F), new Vector2(13.2639999F, 7.73600006F));
                    builder.AddCubicBezier(new Vector2(13.2639999F, 7.73600006F), new Vector2(13.1590004F, 7.84100008F), new Vector2(13.1590004F, 7.84100008F));
                    builder.AddCubicBezier(new Vector2(13.1590004F, 7.84100008F), new Vector2(11.4329996F, 9.56700039F), new Vector2(11.4329996F, 9.56700039F));
                    builder.AddCubicBezier(new Vector2(11.4329996F, 9.56700039F), new Vector2(-9.5F, 30F), new Vector2(-9.5F, 30F));
                    builder.AddCubicBezier(new Vector2(-14F, 34.5F), new Vector2(-20F, 34.5F), new Vector2(-24.5F, 30F));
                    builder.AddCubicBezier(new Vector2(-24.5F, 30F), new Vector2(-29F, 25.5F), new Vector2(-29F, 25.5F));
                    builder.AddCubicBezier(new Vector2(-33.5F, 21F), new Vector2(-33.5F, 15F), new Vector2(-29F, 10.5F));
                    builder.AddCubicBezier(new Vector2(-29F, 10.5F), new Vector2(-7.40700006F, -10.5930004F), new Vector2(-7.40700006F, -10.5930004F));
                    builder.AddCubicBezier(new Vector2(-7.40700006F, -10.5930004F), new Vector2(-6.06099987F, -11.9390001F), new Vector2(-6.06099987F, -11.9390001F));
                    builder.AddCubicBezier(new Vector2(-6.06099987F, -11.9390001F), new Vector2(-5.89900017F, -12.1009998F), new Vector2(-5.89900017F, -12.1009998F));
                    builder.AddCubicBezier(new Vector2(-5.89900017F, -12.1009998F), new Vector2(-4.24599981F, -13.7539997F), new Vector2(-4.24599981F, -13.7539997F));
                    builder.AddCubicBezier(new Vector2(-4.24599981F, -13.7539997F), new Vector2(17.25F, -34.75F), new Vector2(17.25F, -34.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_09()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_10(), Geometry_11(), Geometry_12() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-84.4140015F, 3.2750001F));
                    builder.AddCubicBezier(new Vector2(-78.4140015F, 9.27499962F), new Vector2(-78.4140015F, 16.7749996F), new Vector2(-84.4140015F, 22.7749996F));
                    builder.AddCubicBezier(new Vector2(-84.4140015F, 22.7749996F), new Vector2(-97.9140015F, 34.7750015F), new Vector2(-97.9140015F, 34.7750015F));
                    builder.AddCubicBezier(new Vector2(-115.914001F, 52.7750015F), new Vector2(-115.914001F, 82.7750015F), new Vector2(-97.9140015F, 100.775002F));
                    builder.AddCubicBezier(new Vector2(-79.9140015F, 118.775002F), new Vector2(-52.9140015F, 118.775002F), new Vector2(-34.9140015F, 102.275002F));
                    builder.AddCubicBezier(new Vector2(-34.9140015F, 102.275002F), new Vector2(-19.9139996F, 87.2750015F), new Vector2(-19.9139996F, 87.2750015F));
                    builder.AddCubicBezier(new Vector2(-13.9139996F, 81.2750015F), new Vector2(-6.41400003F, 81.2750015F), new Vector2(-0.414000005F, 87.2750015F));
                    builder.AddCubicBezier(new Vector2(5.58599997F, 93.2750015F), new Vector2(5.58599997F, 100.775002F), new Vector2(-0.414000005F, 106.775002F));
                    builder.AddCubicBezier(new Vector2(-0.414000005F, 106.775002F), new Vector2(-13.9139996F, 120.275002F), new Vector2(-13.9139996F, 120.275002F));
                    builder.AddCubicBezier(new Vector2(-42.4140015F, 148.774994F), new Vector2(-88.9140015F, 148.774994F), new Vector2(-117.414001F, 120.275002F));
                    builder.AddCubicBezier(new Vector2(-145.914001F, 91.7750015F), new Vector2(-145.914001F, 45.2750015F), new Vector2(-117.414001F, 16.7749996F));
                    builder.AddCubicBezier(new Vector2(-117.414001F, 16.7749996F), new Vector2(-103.914001F, 3.2750001F), new Vector2(-103.914001F, 3.2750001F));
                    builder.AddCubicBezier(new Vector2(-97.9140015F, -2.7249999F), new Vector2(-90.4140015F, -2.7249999F), new Vector2(-84.4140015F, 3.2750001F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(16.2280006F, -118.185997F));
                    builder.AddCubicBezier(new Vector2(44.7280006F, -146.686005F), new Vector2(91.2279968F, -146.686005F), new Vector2(119.727997F, -118.185997F));
                    builder.AddCubicBezier(new Vector2(148.227997F, -89.685997F), new Vector2(147.977997F, -43.5610008F), new Vector2(120.352997F, -14.3109999F));
                    builder.AddCubicBezier(new Vector2(120.352997F, -14.3109999F), new Vector2(107.102997F, -0.0610000007F), new Vector2(107.102997F, -0.0610000007F));
                    builder.AddCubicBezier(new Vector2(101.102997F, 5.93900013F), new Vector2(94.2279968F, 5.75099993F), new Vector2(88.2279968F, 0.31400001F));
                    builder.AddCubicBezier(new Vector2(81.9410019F, -5.38399982F), new Vector2(82.2279968F, -13.1859999F), new Vector2(88.2279968F, -19.1860008F));
                    builder.AddCubicBezier(new Vector2(88.2279968F, -19.1860008F), new Vector2(101.727997F, -32.6860008F), new Vector2(101.727997F, -32.6860008F));
                    builder.AddCubicBezier(new Vector2(119.727997F, -50.6860008F), new Vector2(119.727997F, -80.685997F), new Vector2(101.727997F, -98.685997F));
                    builder.AddCubicBezier(new Vector2(83.7279968F, -116.685997F), new Vector2(53.7280006F, -116.685997F), new Vector2(35.7280006F, -98.685997F));
                    builder.AddCubicBezier(new Vector2(35.7280006F, -98.685997F), new Vector2(22.2280006F, -85.185997F), new Vector2(22.2280006F, -85.185997F));
                    builder.AddCubicBezier(new Vector2(16.2280006F, -79.185997F), new Vector2(8.72799969F, -79.185997F), new Vector2(2.72799993F, -85.185997F));
                    builder.AddCubicBezier(new Vector2(-3.27200007F, -91.185997F), new Vector2(-3.27200007F, -98.685997F), new Vector2(2.72799993F, -104.685997F));
                    builder.AddCubicBezier(new Vector2(2.72799993F, -104.685997F), new Vector2(16.2280006F, -118.185997F), new Vector2(16.2280006F, -118.185997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(30.566F, -40.8030014F));
                    builder.AddCubicBezier(new Vector2(37.5550003F, -39.8580017F), new Vector2(45.6640015F, -37.0839996F), new Vector2(45.776001F, -28.007F));
                    builder.AddCubicBezier(new Vector2(45.776001F, -28.007F), new Vector2(46.7779999F, -21.441F), new Vector2(46.7779999F, -21.441F));
                    builder.AddCubicBezier(new Vector2(45.2369995F, -14.0369997F), new Vector2(42.6839981F, -12.7810001F), new Vector2(34.7299995F, -11.6719999F));
                    builder.AddCubicBezier(new Vector2(34.7299995F, -11.6719999F), new Vector2(0.232999995F, -18.2889996F), new Vector2(0.232999995F, -18.2889996F));
                    builder.AddCubicBezier(new Vector2(0.232999995F, -18.2889996F), new Vector2(-2.36400008F, -17.5060005F), new Vector2(-2.36400008F, -17.5060005F));
                    builder.AddCubicBezier(new Vector2(-2.36400008F, -17.5060005F), new Vector2(-2.54999995F, -17.427F), new Vector2(-2.54999995F, -17.427F));
                    builder.AddCubicBezier(new Vector2(-2.54999995F, -17.427F), new Vector2(-3.28800011F, -14.7690001F), new Vector2(-3.28800011F, -14.7690001F));
                    builder.AddCubicBezier(new Vector2(-3.28800011F, -14.7690001F), new Vector2(13.0509996F, 58.9360008F), new Vector2(13.0509996F, 58.9360008F));
                    builder.AddCubicBezier(new Vector2(14.2740002F, 65.4769974F), new Vector2(9.03800011F, 71.0039978F), new Vector2(1.02999997F, 70.4069977F));
                    builder.AddCubicBezier(new Vector2(1.02999997F, 70.4069977F), new Vector2(-4.69899988F, 69.4690018F), new Vector2(-4.69899988F, 69.4690018F));
                    builder.AddCubicBezier(new Vector2(-12.7069998F, 68.8720016F), new Vector2(-15.0129995F, 61.5709991F), new Vector2(-16.6289997F, 54.6800003F));
                    builder.AddCubicBezier(new Vector2(-16.6289997F, 54.6800003F), new Vector2(-32.875F, -33.0779991F), new Vector2(-32.6529999F, -35.3769989F));
                    builder.AddCubicBezier(new Vector2(-32.3330002F, -38.6850014F), new Vector2(-29.4249992F, -43.1230011F), new Vector2(-29.4249992F, -43.1230011F));
                    builder.AddCubicBezier(new Vector2(-29.4249992F, -43.1230011F), new Vector2(-27.8309994F, -44.7900009F), new Vector2(-27.8309994F, -44.7900009F));
                    builder.AddCubicBezier(new Vector2(-27.8309994F, -44.7900009F), new Vector2(-22.7299995F, -47.9669991F), new Vector2(-19.1900005F, -48.1739998F));
                    builder.AddCubicBezier(new Vector2(-17.2919998F, -48.2849998F), new Vector2(30.566F, -40.8030014F), new Vector2(30.566F, -40.8030014F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_13()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_14(), Geometry_15(), Geometry_16(), Geometry_17() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_14()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(99.1669998F, 99.1669998F));
                    builder.AddCubicBezier(new Vector2(154F, 44.3339996F), new Vector2(154F, -44.3339996F), new Vector2(99.1669998F, -99.1669998F));
                    builder.AddCubicBezier(new Vector2(44.3339996F, -154F), new Vector2(-44.3339996F, -154F), new Vector2(-99.1669998F, -99.1669998F));
                    builder.AddCubicBezier(new Vector2(-154F, -44.3339996F), new Vector2(-154F, 44.3339996F), new Vector2(-99.1669998F, 99.1669998F));
                    builder.AddCubicBezier(new Vector2(-44.3339996F, 154F), new Vector2(44.3339996F, 154F), new Vector2(99.1669998F, 99.1669998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_15()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-45.5F, -39.5680008F));
                    builder.AddCubicBezier(new Vector2(-39.5F, -33.5680008F), new Vector2(-34.125F, -32.125F), new Vector2(-41.125F, -24.1930008F));
                    builder.AddCubicBezier(new Vector2(-41.125F, -24.1930008F), new Vector2(-54.125F, -11.0679998F), new Vector2(-54.125F, -11.0679998F));
                    builder.AddCubicBezier(new Vector2(-72.125F, 6.93200016F), new Vector2(-72.125F, 36.9319992F), new Vector2(-54.125F, 54.9319992F));
                    builder.AddCubicBezier(new Vector2(-36.125F, 72.9319992F), new Vector2(-9.125F, 72.9319992F), new Vector2(8.875F, 56.4319992F));
                    builder.AddCubicBezier(new Vector2(8.875F, 56.4319992F), new Vector2(24.375F, 41.8069992F), new Vector2(24.375F, 41.8069992F));
                    builder.AddCubicBezier(new Vector2(32.375F, 34.375F), new Vector2(32.875F, 39.1819992F), new Vector2(38.875F, 45.1819992F));
                    builder.AddCubicBezier(new Vector2(44.875F, 51.1819992F), new Vector2(50.75F, 53.5F), new Vector2(43.375F, 60.9319992F));
                    builder.AddCubicBezier(new Vector2(43.375F, 60.9319992F), new Vector2(29.875F, 74.4319992F), new Vector2(29.875F, 74.4319992F));
                    builder.AddCubicBezier(new Vector2(1.375F, 102.931999F), new Vector2(-45.125F, 102.931999F), new Vector2(-73.625F, 74.4319992F));
                    builder.AddCubicBezier(new Vector2(-102.125F, 45.9319992F), new Vector2(-102.125F, -0.568000019F), new Vector2(-73.625F, -29.0680008F));
                    builder.AddCubicBezier(new Vector2(-73.625F, -29.0680008F), new Vector2(-60.375F, -42.9430008F), new Vector2(-60.375F, -42.9430008F));
                    builder.AddCubicBezier(new Vector2(-53.75F, -49.75F), new Vector2(-51.5F, -45.5680008F), new Vector2(-45.5F, -39.5680008F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_16()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-33.6730003F, -69.6660004F));
                    builder.AddCubicBezier(new Vector2(-5.17299986F, -98.1660004F), new Vector2(41.3269997F, -98.1660004F), new Vector2(69.8270035F, -69.6660004F));
                    builder.AddCubicBezier(new Vector2(98.3270035F, -41.1660004F), new Vector2(98.0770035F, 4.95900011F), new Vector2(70.4520035F, 34.2089996F));
                    builder.AddCubicBezier(new Vector2(70.4520035F, 34.2089996F), new Vector2(57.2019997F, 48.4589996F), new Vector2(57.2019997F, 48.4589996F));
                    builder.AddCubicBezier(new Vector2(48.25F, 57.375F), new Vector2(46.2019997F, 51.7709999F), new Vector2(40.2019997F, 46.3339996F));
                    builder.AddCubicBezier(new Vector2(33.9150009F, 40.6360016F), new Vector2(29.5F, 37.875F), new Vector2(38.3269997F, 29.3339996F));
                    builder.AddCubicBezier(new Vector2(38.3269997F, 29.3339996F), new Vector2(51.8269997F, 15.8339996F), new Vector2(51.8269997F, 15.8339996F));
                    builder.AddCubicBezier(new Vector2(69.8270035F, -2.16599989F), new Vector2(69.8270035F, -32.1660004F), new Vector2(51.8269997F, -50.1660004F));
                    builder.AddCubicBezier(new Vector2(33.8269997F, -68.1660004F), new Vector2(3.8269999F, -68.1660004F), new Vector2(-14.1730003F, -50.1660004F));
                    builder.AddCubicBezier(new Vector2(-14.1730003F, -50.1660004F), new Vector2(-27.6730003F, -36.6660004F), new Vector2(-27.6730003F, -36.6660004F));
                    builder.AddCubicBezier(new Vector2(-36F, -29.25F), new Vector2(-38.0480003F, -32.9160004F), new Vector2(-44.0480003F, -38.9160004F));
                    builder.AddCubicBezier(new Vector2(-50.0480003F, -44.9160004F), new Vector2(-54.5F, -48.5F), new Vector2(-47.1730003F, -56.1660004F));
                    builder.AddCubicBezier(new Vector2(-47.1730003F, -56.1660004F), new Vector2(-33.6730003F, -69.6660004F), new Vector2(-33.6730003F, -69.6660004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_17()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12.6280003F, -29.6420002F));
                    builder.AddCubicBezier(new Vector2(17.1630001F, -34.1069984F), new Vector2(23.1620007F, -34.0600014F), new Vector2(27.6270008F, -29.5249996F));
                    builder.AddCubicBezier(new Vector2(27.6270008F, -29.5249996F), new Vector2(32.0919991F, -24.9899998F), new Vector2(32.0919991F, -24.9899998F));
                    builder.AddCubicBezier(new Vector2(36.5569992F, -20.4549999F), new Vector2(36.5110016F, -14.4560003F), new Vector2(31.9759998F, -9.99100018F));
                    builder.AddCubicBezier(new Vector2(31.9759998F, -9.99100018F), new Vector2(14.1599998F, 6.86199999F), new Vector2(14.1599998F, 6.86199999F));
                    builder.AddCubicBezier(new Vector2(14.1599998F, 6.86199999F), new Vector2(13.1929998F, 7.8130002F), new Vector2(13.1929998F, 7.8130002F));
                    builder.AddCubicBezier(new Vector2(13.1929998F, 7.8130002F), new Vector2(13.0869999F, 7.91800022F), new Vector2(13.0869999F, 7.91800022F));
                    builder.AddCubicBezier(new Vector2(13.0869999F, 7.91800022F), new Vector2(11.3479996F, 9.63000011F), new Vector2(11.3479996F, 9.63000011F));
                    builder.AddCubicBezier(new Vector2(11.3479996F, 9.63000011F), new Vector2(-6.15100002F, 26.934F), new Vector2(-6.15100002F, 26.934F));
                    builder.AddCubicBezier(new Vector2(-10.6859999F, 31.3990002F), new Vector2(-16.6860008F, 31.3530006F), new Vector2(-21.1509991F, 26.8180008F));
                    builder.AddCubicBezier(new Vector2(-21.1509991F, 26.8180008F), new Vector2(-25.6159992F, 22.2830009F), new Vector2(-25.6159992F, 22.2830009F));
                    builder.AddCubicBezier(new Vector2(-30.0809994F, 17.7479992F), new Vector2(-30.0340004F, 11.7480001F), new Vector2(-25.4990005F, 7.28299999F));
                    builder.AddCubicBezier(new Vector2(-25.4990005F, 7.28299999F), new Vector2(-7.33500004F, -10.6750002F), new Vector2(-7.33500004F, -10.6750002F));
                    builder.AddCubicBezier(new Vector2(-7.33500004F, -10.6750002F), new Vector2(-5.97800016F, -12.0109997F), new Vector2(-5.97800016F, -12.0109997F));
                    builder.AddCubicBezier(new Vector2(-5.97800016F, -12.0109997F), new Vector2(-5.81599998F, -12.1709995F), new Vector2(-5.81599998F, -12.1709995F));
                    builder.AddCubicBezier(new Vector2(-5.81599998F, -12.1709995F), new Vector2(-4.1500001F, -13.8120003F), new Vector2(-4.1500001F, -13.8120003F));
                    builder.AddCubicBezier(new Vector2(-4.1500001F, -13.8120003F), new Vector2(12.6280003F, -29.6420002F), new Vector2(12.6280003F, -29.6420002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_18()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(181.710999F, 52.3110008F), new Vector2(181.710999F, -52.3110008F), new Vector2(117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(52.3110008F, -181.710999F), new Vector2(-52.3110008F, -181.710999F), new Vector2(-117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(-181.710999F, -52.3110008F), new Vector2(-181.710999F, 52.3110008F), new Vector2(-117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(-52.3110008F, 181.710999F), new Vector2(52.3110008F, 181.712006F), new Vector2(117.011002F, 117.011002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Wibe
            // - - - Transforms: Wibe Scale:0.9732,0.9732
            // - Path
            CanvasGeometry Geometry_19()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(172.035004F, 172.035004F));
                    builder.AddCubicBezier(new Vector2(267.160004F, 76.9100037F), new Vector2(267.160004F, -76.9100037F), new Vector2(172.035004F, -172.035004F));
                    builder.AddCubicBezier(new Vector2(76.9100037F, -267.160004F), new Vector2(-76.9100037F, -267.160004F), new Vector2(-172.035004F, -172.035004F));
                    builder.AddCubicBezier(new Vector2(-267.160004F, -76.9100037F), new Vector2(-267.160004F, 76.9100037F), new Vector2(-172.035004F, 172.035004F));
                    builder.AddCubicBezier(new Vector2(-76.9100037F, 267.160004F), new Vector2(76.9100037F, 267.160004F), new Vector2(172.035004F, 172.035004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                // Transforms: Wibe Scale:0.9732,0.9732
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_00());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_09());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_18());
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Copy-link
            // Path 4+Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // Layer aggregator
            // Path 4+Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ThemeColor_Foreground();
                return result;
            }

            // - - Layer aggregator
            // - Layer: Wibe
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Scale:<0.9732, 0.9732>
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(0.973200023F, 0F, 0F, 0.973200023F, 0F, 0F));;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.699999988F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            // - - Layer aggregator
            // - ShapeGroup: Copy-link
            // Path 4+Path 3+Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 2.
                result.InsertKeyFrame(0.0166666675F, Path_0(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, new CompositionPath(Geometry_05()), _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 29.
                result.InsertKeyFrame(0.24166666F, Path_1(), _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.200000003F, 1F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, Path_1(), HoldThenStepEasingFunction());
                // Frame 50.
                result.InsertKeyFrame(0.416666657F, new CompositionPath(Geometry_13()), _c.CreateCubicBezierEasingFunction(new Vector2(0.49000001F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, Path_0(), _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 0F), new Vector2(0.5F, 1F)));
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Wibe
            // - Transforms: Wibe Scale:0.9732,0.9732
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, Path_2(), HoldThenStepEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, new CompositionPath(Geometry_19()), CubicBezierEasingFunction_1());
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_360 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_360; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_360 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, -68.0749969F, _c.CreateCubicBezierEasingFunction(new Vector2(0.279000014F, 0F), new Vector2(0.643000007F, 0.971000016F)));
                // Frame 27.
                result.InsertKeyFrame(0.224999994F, 220F, _c.CreateCubicBezierEasingFunction(new Vector2(0.363999993F, 0F), new Vector2(0.200000003F, 0.912F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 225F, _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 1F), new Vector2(0.200000003F, 1F)));
                // Frame 48.
                result.InsertKeyFrame(0.400000006F, 365F, _c.CreateCubicBezierEasingFunction(new Vector2(0.757000029F, 0F), new Vector2(0.5F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 360F, CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1()
            {
                // Frame 0.
                if (_scalarAnimation_0_to_1 != null) { return _scalarAnimation_0_to_1; }
                var result = _scalarAnimation_0_to_1 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, 0.980000019F, _c.CreateCubicBezierEasingFunction(new Vector2(0.379999995F, 0F), new Vector2(0.400000006F, 0.865999997F)));
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 0.870000005F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.537999988F, 1F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.523000002F, 1F)));
                // Frame 45.
                result.InsertKeyFrame(0.375F, 0.899999976F, _c.CreateCubicBezierEasingFunction(new Vector2(0.474999994F, 0.455000013F), new Vector2(0.561999977F, 1F)));
                // Frame 52.
                result.InsertKeyFrame(0.433333337F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.437999994F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_20_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 20F, StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 20F, HoldThenStepEasingFunction());
                // Frame 38.
                result.InsertKeyFrame(0.316666663F, 0F, CubicBezierEasingFunction_1());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                var shapes = result.Shapes;
                // ShapeGroup: Copy-link
                shapes.Add(SpriteShape_0());
                // Layer: Wibe
                shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                // Frame 0.
                if (_offsetVector2Animation != null) { return _offsetVector2Animation; }
                var result = _offsetVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(256F, 256F), StepThenHoldEasingFunction());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, new Vector2(256F, 256F), HoldThenStepEasingFunction());
                // Frame 44.
                result.InsertKeyFrame(0.366666675F, new Vector2(256F, 264.25F), CubicBezierEasingFunction_0());
                // Frame 51.
                result.InsertKeyFrame(0.425000012F, new Vector2(256F, 248.5F), CubicBezierEasingFunction_0());
                // Frame 58.
                result.InsertKeyFrame(0.483333319F, new Vector2(256F, 256F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 18.
                result.InsertKeyFrame(0.150000006F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 41.
                result.InsertKeyFrame(0.341666669F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            internal TeachingTipLinkCopied_AnimatedVisual_UAPv15(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape_0.StartAnimation("Scale", ShapeVisibilityAnimation(), AnimationController_0());
                _containerShape_1.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), AnimationController_0());
                _containerShape_1.StartAnimation("Scale.X", ScalarAnimation_0_to_1(), AnimationController_0());
                _containerShape_1.StartAnimation("Scale.Y", ScalarAnimation_0_to_1(), AnimationController_0());
                _containerShape_1.StartAnimation("Offset", OffsetVector2Animation(), AnimationController_0());
                _pathGeometry_0.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_0());
                _pathGeometry_1.StartAnimation("Path", PathKeyFrameAnimation_1(), AnimationController_0());
                _spriteShape_0.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale.X", ScalarAnimation_0_to_1(), AnimationController_0());
                _spriteShape_0.StartAnimation("Scale.Y", ScalarAnimation_0_to_1(), AnimationController_0());
                _spriteShape_0.StartAnimation("Offset", OffsetVector2Animation(), AnimationController_0());
                _spriteShape_1.StartAnimation("StrokeThickness", StrokeThicknessScalarAnimation_20_to_0(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("RotationAngleInDegrees");
                _containerShape_1.StopAnimation("Scale.X");
                _containerShape_1.StopAnimation("Scale.Y");
                _containerShape_1.StopAnimation("Offset");
                _pathGeometry_0.StopAnimation("Path");
                _pathGeometry_1.StopAnimation("Path");
                _spriteShape_0.StopAnimation("RotationAngleInDegrees");
                _spriteShape_0.StopAnimation("Scale.X");
                _spriteShape_0.StopAnimation("Scale.Y");
                _spriteShape_0.StopAnimation("Offset");
                _spriteShape_1.StopAnimation("StrokeThickness");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 15);
            }
        }

        sealed class TeachingTipLinkCopied_AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CanvasGeometry _geometry_01;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPath _path_2;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_360;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_02(), Geometry_03(), Geometry_04() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(198F, 57F), new Vector2(198F, -57F), new Vector2(127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(57F, -198F), new Vector2(-57F, -198F), new Vector2(-127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(-198F, -57F), new Vector2(-198F, 57F), new Vector2(-127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(-57F, 198F), new Vector2(57F, 198F), new Vector2(127.5F, 127.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = _geometry_01 = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-51F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-45F, -25.5F), new Vector2(-45F, -18F), new Vector2(-51F, -12F));
                    builder.AddCubicBezier(new Vector2(-51F, -12F), new Vector2(-64.5F, 0F), new Vector2(-64.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-82.5F, 18F), new Vector2(-82.5F, 48F), new Vector2(-64.5F, 66F));
                    builder.AddCubicBezier(new Vector2(-46.5F, 84F), new Vector2(-19.5F, 84F), new Vector2(-1.5F, 67.5F));
                    builder.AddCubicBezier(new Vector2(-1.5F, 67.5F), new Vector2(13.5F, 52.5F), new Vector2(13.5F, 52.5F));
                    builder.AddCubicBezier(new Vector2(19.5F, 46.5F), new Vector2(27F, 46.5F), new Vector2(33F, 52.5F));
                    builder.AddCubicBezier(new Vector2(39F, 58.5F), new Vector2(39F, 66F), new Vector2(33F, 72F));
                    builder.AddCubicBezier(new Vector2(33F, 72F), new Vector2(19.5F, 85.5F), new Vector2(19.5F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-9F, 114F), new Vector2(-55.5F, 114F), new Vector2(-84F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-112.5F, 57F), new Vector2(-112.5F, 10.5F), new Vector2(-84F, -18F));
                    builder.AddCubicBezier(new Vector2(-84F, -18F), new Vector2(-70.5F, -31.5F), new Vector2(-70.5F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-64.5F, -37.5F), new Vector2(-57F, -37.5F), new Vector2(-51F, -31.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-15F, -88.5F));
                    builder.AddCubicBezier(new Vector2(13.5F, -117F), new Vector2(60F, -117F), new Vector2(88.5F, -88.5F));
                    builder.AddCubicBezier(new Vector2(117F, -60F), new Vector2(116.75F, -13.875F), new Vector2(89.125F, 15.375F));
                    builder.AddCubicBezier(new Vector2(89.125F, 15.375F), new Vector2(75.875F, 29.625F), new Vector2(75.875F, 29.625F));
                    builder.AddCubicBezier(new Vector2(69.875F, 35.625F), new Vector2(63F, 35.4370003F), new Vector2(57F, 30F));
                    builder.AddCubicBezier(new Vector2(50.7130013F, 24.302F), new Vector2(51F, 16.5F), new Vector2(57F, 10.5F));
                    builder.AddCubicBezier(new Vector2(57F, 10.5F), new Vector2(70.5F, -3F), new Vector2(70.5F, -3F));
                    builder.AddCubicBezier(new Vector2(88.5F, -21F), new Vector2(88.5F, -51F), new Vector2(70.5F, -69F));
                    builder.AddCubicBezier(new Vector2(52.5F, -87F), new Vector2(22.5F, -87F), new Vector2(4.5F, -69F));
                    builder.AddCubicBezier(new Vector2(4.5F, -69F), new Vector2(-9F, -55.5F), new Vector2(-9F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-15F, -49.5F), new Vector2(-22.5F, -49.5F), new Vector2(-28.5F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-34.5F, -61.5F), new Vector2(-34.5F, -69F), new Vector2(-28.5F, -75F));
                    builder.AddCubicBezier(new Vector2(-28.5F, -75F), new Vector2(-15F, -88.5F), new Vector2(-15F, -88.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21F, -39F));
                    builder.AddCubicBezier(new Vector2(25.5F, -43.5F), new Vector2(31.5F, -43.5F), new Vector2(36F, -39F));
                    builder.AddCubicBezier(new Vector2(36F, -39F), new Vector2(40.5F, -34.5F), new Vector2(40.5F, -34.5F));
                    builder.AddCubicBezier(new Vector2(45F, -30F), new Vector2(45F, -24F), new Vector2(40.5F, -19.5F));
                    builder.AddCubicBezier(new Vector2(40.5F, -19.5F), new Vector2(14.2229996F, 6.77699995F), new Vector2(14.2229996F, 6.77699995F));
                    builder.AddCubicBezier(new Vector2(14.2229996F, 6.77699995F), new Vector2(13.2639999F, 7.73600006F), new Vector2(13.2639999F, 7.73600006F));
                    builder.AddCubicBezier(new Vector2(13.2639999F, 7.73600006F), new Vector2(13.1590004F, 7.84100008F), new Vector2(13.1590004F, 7.84100008F));
                    builder.AddCubicBezier(new Vector2(13.1590004F, 7.84100008F), new Vector2(11.4329996F, 9.56700039F), new Vector2(11.4329996F, 9.56700039F));
                    builder.AddCubicBezier(new Vector2(11.4329996F, 9.56700039F), new Vector2(-15F, 36F), new Vector2(-15F, 36F));
                    builder.AddCubicBezier(new Vector2(-19.5F, 40.5F), new Vector2(-25.5F, 40.5F), new Vector2(-30F, 36F));
                    builder.AddCubicBezier(new Vector2(-30F, 36F), new Vector2(-34.5F, 31.5F), new Vector2(-34.5F, 31.5F));
                    builder.AddCubicBezier(new Vector2(-39F, 27F), new Vector2(-39F, 21F), new Vector2(-34.5F, 16.5F));
                    builder.AddCubicBezier(new Vector2(-34.5F, 16.5F), new Vector2(-7.40700006F, -10.5930004F), new Vector2(-7.40700006F, -10.5930004F));
                    builder.AddCubicBezier(new Vector2(-7.40700006F, -10.5930004F), new Vector2(-6.06099987F, -11.9390001F), new Vector2(-6.06099987F, -11.9390001F));
                    builder.AddCubicBezier(new Vector2(-6.06099987F, -11.9390001F), new Vector2(-5.89900017F, -12.1009998F), new Vector2(-5.89900017F, -12.1009998F));
                    builder.AddCubicBezier(new Vector2(-5.89900017F, -12.1009998F), new Vector2(-4.24599981F, -13.7539997F), new Vector2(-4.24599981F, -13.7539997F));
                    builder.AddCubicBezier(new Vector2(-4.24599981F, -13.7539997F), new Vector2(21F, -39F), new Vector2(21F, -39F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_05()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_06(), Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-46F, -35F));
                    builder.AddCubicBezier(new Vector2(-40F, -29F), new Vector2(-40F, -21.5F), new Vector2(-46F, -15.5F));
                    builder.AddCubicBezier(new Vector2(-46F, -15.5F), new Vector2(-59.5F, -3.5F), new Vector2(-59.5F, -3.5F));
                    builder.AddCubicBezier(new Vector2(-77.5F, 14.5F), new Vector2(-77.5F, 44.5F), new Vector2(-59.5F, 62.5F));
                    builder.AddCubicBezier(new Vector2(-41.5F, 80.5F), new Vector2(-14.5F, 80.5F), new Vector2(3.5F, 64F));
                    builder.AddCubicBezier(new Vector2(3.5F, 64F), new Vector2(18.5F, 49F), new Vector2(18.5F, 49F));
                    builder.AddCubicBezier(new Vector2(24.5F, 43F), new Vector2(32F, 43F), new Vector2(38F, 49F));
                    builder.AddCubicBezier(new Vector2(44F, 55F), new Vector2(44F, 62.5F), new Vector2(38F, 68.5F));
                    builder.AddCubicBezier(new Vector2(38F, 68.5F), new Vector2(24.5F, 82F), new Vector2(24.5F, 82F));
                    builder.AddCubicBezier(new Vector2(-4F, 110.5F), new Vector2(-50.5F, 110.5F), new Vector2(-79F, 82F));
                    builder.AddCubicBezier(new Vector2(-107.5F, 53.5F), new Vector2(-107.5F, 7F), new Vector2(-79F, -21.5F));
                    builder.AddCubicBezier(new Vector2(-79F, -21.5F), new Vector2(-65.5F, -35F), new Vector2(-65.5F, -35F));
                    builder.AddCubicBezier(new Vector2(-59.5F, -41F), new Vector2(-52F, -41F), new Vector2(-46F, -35F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-22.5F, -81F));
                    builder.AddCubicBezier(new Vector2(6F, -109.5F), new Vector2(52.5F, -109.5F), new Vector2(81F, -81F));
                    builder.AddCubicBezier(new Vector2(109.5F, -52.5F), new Vector2(109.25F, -6.375F), new Vector2(81.625F, 22.875F));
                    builder.AddCubicBezier(new Vector2(81.625F, 22.875F), new Vector2(68.375F, 37.125F), new Vector2(68.375F, 37.125F));
                    builder.AddCubicBezier(new Vector2(62.375F, 43.125F), new Vector2(55.5F, 42.9370003F), new Vector2(49.5F, 37.5F));
                    builder.AddCubicBezier(new Vector2(43.2130013F, 31.802F), new Vector2(43.5F, 24F), new Vector2(49.5F, 18F));
                    builder.AddCubicBezier(new Vector2(49.5F, 18F), new Vector2(63F, 4.5F), new Vector2(63F, 4.5F));
                    builder.AddCubicBezier(new Vector2(81F, -13.5F), new Vector2(81F, -43.5F), new Vector2(63F, -61.5F));
                    builder.AddCubicBezier(new Vector2(45F, -79.5F), new Vector2(15F, -79.5F), new Vector2(-3F, -61.5F));
                    builder.AddCubicBezier(new Vector2(-3F, -61.5F), new Vector2(-16.5F, -48F), new Vector2(-16.5F, -48F));
                    builder.AddCubicBezier(new Vector2(-22.5F, -42F), new Vector2(-30F, -42F), new Vector2(-36F, -48F));
                    builder.AddCubicBezier(new Vector2(-42F, -54F), new Vector2(-42F, -61.5F), new Vector2(-36F, -67.5F));
                    builder.AddCubicBezier(new Vector2(-36F, -67.5F), new Vector2(-22.5F, -81F), new Vector2(-22.5F, -81F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(17.25F, -34.75F));
                    builder.AddCubicBezier(new Vector2(21.75F, -39.25F), new Vector2(27.75F, -39.25F), new Vector2(32.25F, -34.75F));
                    builder.AddCubicBezier(new Vector2(32.25F, -34.75F), new Vector2(36.75F, -30.25F), new Vector2(36.75F, -30.25F));
                    builder.AddCubicBezier(new Vector2(41.25F, -25.75F), new Vector2(41.25F, -19.75F), new Vector2(36.75F, -15.25F));
                    builder.AddCubicBezier(new Vector2(36.75F, -15.25F), new Vector2(14.2229996F, 6.77699995F), new Vector2(14.2229996F, 6.77699995F));
                    builder.AddCubicBezier(new Vector2(14.2229996F, 6.77699995F), new Vector2(13.2639999F, 7.73600006F), new Vector2(13.2639999F, 7.73600006F));
                    builder.AddCubicBezier(new Vector2(13.2639999F, 7.73600006F), new Vector2(13.1590004F, 7.84100008F), new Vector2(13.1590004F, 7.84100008F));
                    builder.AddCubicBezier(new Vector2(13.1590004F, 7.84100008F), new Vector2(11.4329996F, 9.56700039F), new Vector2(11.4329996F, 9.56700039F));
                    builder.AddCubicBezier(new Vector2(11.4329996F, 9.56700039F), new Vector2(-9.5F, 30F), new Vector2(-9.5F, 30F));
                    builder.AddCubicBezier(new Vector2(-14F, 34.5F), new Vector2(-20F, 34.5F), new Vector2(-24.5F, 30F));
                    builder.AddCubicBezier(new Vector2(-24.5F, 30F), new Vector2(-29F, 25.5F), new Vector2(-29F, 25.5F));
                    builder.AddCubicBezier(new Vector2(-33.5F, 21F), new Vector2(-33.5F, 15F), new Vector2(-29F, 10.5F));
                    builder.AddCubicBezier(new Vector2(-29F, 10.5F), new Vector2(-7.40700006F, -10.5930004F), new Vector2(-7.40700006F, -10.5930004F));
                    builder.AddCubicBezier(new Vector2(-7.40700006F, -10.5930004F), new Vector2(-6.06099987F, -11.9390001F), new Vector2(-6.06099987F, -11.9390001F));
                    builder.AddCubicBezier(new Vector2(-6.06099987F, -11.9390001F), new Vector2(-5.89900017F, -12.1009998F), new Vector2(-5.89900017F, -12.1009998F));
                    builder.AddCubicBezier(new Vector2(-5.89900017F, -12.1009998F), new Vector2(-4.24599981F, -13.7539997F), new Vector2(-4.24599981F, -13.7539997F));
                    builder.AddCubicBezier(new Vector2(-4.24599981F, -13.7539997F), new Vector2(17.25F, -34.75F), new Vector2(17.25F, -34.75F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_09()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_10(), Geometry_11(), Geometry_12() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-84.4140015F, 3.2750001F));
                    builder.AddCubicBezier(new Vector2(-78.4140015F, 9.27499962F), new Vector2(-78.4140015F, 16.7749996F), new Vector2(-84.4140015F, 22.7749996F));
                    builder.AddCubicBezier(new Vector2(-84.4140015F, 22.7749996F), new Vector2(-97.9140015F, 34.7750015F), new Vector2(-97.9140015F, 34.7750015F));
                    builder.AddCubicBezier(new Vector2(-115.914001F, 52.7750015F), new Vector2(-115.914001F, 82.7750015F), new Vector2(-97.9140015F, 100.775002F));
                    builder.AddCubicBezier(new Vector2(-79.9140015F, 118.775002F), new Vector2(-52.9140015F, 118.775002F), new Vector2(-34.9140015F, 102.275002F));
                    builder.AddCubicBezier(new Vector2(-34.9140015F, 102.275002F), new Vector2(-19.9139996F, 87.2750015F), new Vector2(-19.9139996F, 87.2750015F));
                    builder.AddCubicBezier(new Vector2(-13.9139996F, 81.2750015F), new Vector2(-6.41400003F, 81.2750015F), new Vector2(-0.414000005F, 87.2750015F));
                    builder.AddCubicBezier(new Vector2(5.58599997F, 93.2750015F), new Vector2(5.58599997F, 100.775002F), new Vector2(-0.414000005F, 106.775002F));
                    builder.AddCubicBezier(new Vector2(-0.414000005F, 106.775002F), new Vector2(-13.9139996F, 120.275002F), new Vector2(-13.9139996F, 120.275002F));
                    builder.AddCubicBezier(new Vector2(-42.4140015F, 148.774994F), new Vector2(-88.9140015F, 148.774994F), new Vector2(-117.414001F, 120.275002F));
                    builder.AddCubicBezier(new Vector2(-145.914001F, 91.7750015F), new Vector2(-145.914001F, 45.2750015F), new Vector2(-117.414001F, 16.7749996F));
                    builder.AddCubicBezier(new Vector2(-117.414001F, 16.7749996F), new Vector2(-103.914001F, 3.2750001F), new Vector2(-103.914001F, 3.2750001F));
                    builder.AddCubicBezier(new Vector2(-97.9140015F, -2.7249999F), new Vector2(-90.4140015F, -2.7249999F), new Vector2(-84.4140015F, 3.2750001F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(16.2280006F, -118.185997F));
                    builder.AddCubicBezier(new Vector2(44.7280006F, -146.686005F), new Vector2(91.2279968F, -146.686005F), new Vector2(119.727997F, -118.185997F));
                    builder.AddCubicBezier(new Vector2(148.227997F, -89.685997F), new Vector2(147.977997F, -43.5610008F), new Vector2(120.352997F, -14.3109999F));
                    builder.AddCubicBezier(new Vector2(120.352997F, -14.3109999F), new Vector2(107.102997F, -0.0610000007F), new Vector2(107.102997F, -0.0610000007F));
                    builder.AddCubicBezier(new Vector2(101.102997F, 5.93900013F), new Vector2(94.2279968F, 5.75099993F), new Vector2(88.2279968F, 0.31400001F));
                    builder.AddCubicBezier(new Vector2(81.9410019F, -5.38399982F), new Vector2(82.2279968F, -13.1859999F), new Vector2(88.2279968F, -19.1860008F));
                    builder.AddCubicBezier(new Vector2(88.2279968F, -19.1860008F), new Vector2(101.727997F, -32.6860008F), new Vector2(101.727997F, -32.6860008F));
                    builder.AddCubicBezier(new Vector2(119.727997F, -50.6860008F), new Vector2(119.727997F, -80.685997F), new Vector2(101.727997F, -98.685997F));
                    builder.AddCubicBezier(new Vector2(83.7279968F, -116.685997F), new Vector2(53.7280006F, -116.685997F), new Vector2(35.7280006F, -98.685997F));
                    builder.AddCubicBezier(new Vector2(35.7280006F, -98.685997F), new Vector2(22.2280006F, -85.185997F), new Vector2(22.2280006F, -85.185997F));
                    builder.AddCubicBezier(new Vector2(16.2280006F, -79.185997F), new Vector2(8.72799969F, -79.185997F), new Vector2(2.72799993F, -85.185997F));
                    builder.AddCubicBezier(new Vector2(-3.27200007F, -91.185997F), new Vector2(-3.27200007F, -98.685997F), new Vector2(2.72799993F, -104.685997F));
                    builder.AddCubicBezier(new Vector2(2.72799993F, -104.685997F), new Vector2(16.2280006F, -118.185997F), new Vector2(16.2280006F, -118.185997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(30.566F, -40.8030014F));
                    builder.AddCubicBezier(new Vector2(37.5550003F, -39.8580017F), new Vector2(45.6640015F, -37.0839996F), new Vector2(45.776001F, -28.007F));
                    builder.AddCubicBezier(new Vector2(45.776001F, -28.007F), new Vector2(46.7779999F, -21.441F), new Vector2(46.7779999F, -21.441F));
                    builder.AddCubicBezier(new Vector2(45.2369995F, -14.0369997F), new Vector2(42.6839981F, -12.7810001F), new Vector2(34.7299995F, -11.6719999F));
                    builder.AddCubicBezier(new Vector2(34.7299995F, -11.6719999F), new Vector2(0.232999995F, -18.2889996F), new Vector2(0.232999995F, -18.2889996F));
                    builder.AddCubicBezier(new Vector2(0.232999995F, -18.2889996F), new Vector2(-2.36400008F, -17.5060005F), new Vector2(-2.36400008F, -17.5060005F));
                    builder.AddCubicBezier(new Vector2(-2.36400008F, -17.5060005F), new Vector2(-2.54999995F, -17.427F), new Vector2(-2.54999995F, -17.427F));
                    builder.AddCubicBezier(new Vector2(-2.54999995F, -17.427F), new Vector2(-3.28800011F, -14.7690001F), new Vector2(-3.28800011F, -14.7690001F));
                    builder.AddCubicBezier(new Vector2(-3.28800011F, -14.7690001F), new Vector2(13.0509996F, 58.9360008F), new Vector2(13.0509996F, 58.9360008F));
                    builder.AddCubicBezier(new Vector2(14.2740002F, 65.4769974F), new Vector2(9.03800011F, 71.0039978F), new Vector2(1.02999997F, 70.4069977F));
                    builder.AddCubicBezier(new Vector2(1.02999997F, 70.4069977F), new Vector2(-4.69899988F, 69.4690018F), new Vector2(-4.69899988F, 69.4690018F));
                    builder.AddCubicBezier(new Vector2(-12.7069998F, 68.8720016F), new Vector2(-15.0129995F, 61.5709991F), new Vector2(-16.6289997F, 54.6800003F));
                    builder.AddCubicBezier(new Vector2(-16.6289997F, 54.6800003F), new Vector2(-32.875F, -33.0779991F), new Vector2(-32.6529999F, -35.3769989F));
                    builder.AddCubicBezier(new Vector2(-32.3330002F, -38.6850014F), new Vector2(-29.4249992F, -43.1230011F), new Vector2(-29.4249992F, -43.1230011F));
                    builder.AddCubicBezier(new Vector2(-29.4249992F, -43.1230011F), new Vector2(-27.8309994F, -44.7900009F), new Vector2(-27.8309994F, -44.7900009F));
                    builder.AddCubicBezier(new Vector2(-27.8309994F, -44.7900009F), new Vector2(-22.7299995F, -47.9669991F), new Vector2(-19.1900005F, -48.1739998F));
                    builder.AddCubicBezier(new Vector2(-17.2919998F, -48.2849998F), new Vector2(30.566F, -40.8030014F), new Vector2(30.566F, -40.8030014F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - Path
            CanvasGeometry Geometry_13()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_14(), Geometry_15(), Geometry_16(), Geometry_17() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_14()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(99.1669998F, 99.1669998F));
                    builder.AddCubicBezier(new Vector2(154F, 44.3339996F), new Vector2(154F, -44.3339996F), new Vector2(99.1669998F, -99.1669998F));
                    builder.AddCubicBezier(new Vector2(44.3339996F, -154F), new Vector2(-44.3339996F, -154F), new Vector2(-99.1669998F, -99.1669998F));
                    builder.AddCubicBezier(new Vector2(-154F, -44.3339996F), new Vector2(-154F, 44.3339996F), new Vector2(-99.1669998F, 99.1669998F));
                    builder.AddCubicBezier(new Vector2(-44.3339996F, 154F), new Vector2(44.3339996F, 154F), new Vector2(99.1669998F, 99.1669998F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_15()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-45.5F, -39.5680008F));
                    builder.AddCubicBezier(new Vector2(-39.5F, -33.5680008F), new Vector2(-34.125F, -32.125F), new Vector2(-41.125F, -24.1930008F));
                    builder.AddCubicBezier(new Vector2(-41.125F, -24.1930008F), new Vector2(-54.125F, -11.0679998F), new Vector2(-54.125F, -11.0679998F));
                    builder.AddCubicBezier(new Vector2(-72.125F, 6.93200016F), new Vector2(-72.125F, 36.9319992F), new Vector2(-54.125F, 54.9319992F));
                    builder.AddCubicBezier(new Vector2(-36.125F, 72.9319992F), new Vector2(-9.125F, 72.9319992F), new Vector2(8.875F, 56.4319992F));
                    builder.AddCubicBezier(new Vector2(8.875F, 56.4319992F), new Vector2(24.375F, 41.8069992F), new Vector2(24.375F, 41.8069992F));
                    builder.AddCubicBezier(new Vector2(32.375F, 34.375F), new Vector2(32.875F, 39.1819992F), new Vector2(38.875F, 45.1819992F));
                    builder.AddCubicBezier(new Vector2(44.875F, 51.1819992F), new Vector2(50.75F, 53.5F), new Vector2(43.375F, 60.9319992F));
                    builder.AddCubicBezier(new Vector2(43.375F, 60.9319992F), new Vector2(29.875F, 74.4319992F), new Vector2(29.875F, 74.4319992F));
                    builder.AddCubicBezier(new Vector2(1.375F, 102.931999F), new Vector2(-45.125F, 102.931999F), new Vector2(-73.625F, 74.4319992F));
                    builder.AddCubicBezier(new Vector2(-102.125F, 45.9319992F), new Vector2(-102.125F, -0.568000019F), new Vector2(-73.625F, -29.0680008F));
                    builder.AddCubicBezier(new Vector2(-73.625F, -29.0680008F), new Vector2(-60.375F, -42.9430008F), new Vector2(-60.375F, -42.9430008F));
                    builder.AddCubicBezier(new Vector2(-53.75F, -49.75F), new Vector2(-51.5F, -45.5680008F), new Vector2(-45.5F, -39.5680008F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_16()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-33.6730003F, -69.6660004F));
                    builder.AddCubicBezier(new Vector2(-5.17299986F, -98.1660004F), new Vector2(41.3269997F, -98.1660004F), new Vector2(69.8270035F, -69.6660004F));
                    builder.AddCubicBezier(new Vector2(98.3270035F, -41.1660004F), new Vector2(98.0770035F, 4.95900011F), new Vector2(70.4520035F, 34.2089996F));
                    builder.AddCubicBezier(new Vector2(70.4520035F, 34.2089996F), new Vector2(57.2019997F, 48.4589996F), new Vector2(57.2019997F, 48.4589996F));
                    builder.AddCubicBezier(new Vector2(48.25F, 57.375F), new Vector2(46.2019997F, 51.7709999F), new Vector2(40.2019997F, 46.3339996F));
                    builder.AddCubicBezier(new Vector2(33.9150009F, 40.6360016F), new Vector2(29.5F, 37.875F), new Vector2(38.3269997F, 29.3339996F));
                    builder.AddCubicBezier(new Vector2(38.3269997F, 29.3339996F), new Vector2(51.8269997F, 15.8339996F), new Vector2(51.8269997F, 15.8339996F));
                    builder.AddCubicBezier(new Vector2(69.8270035F, -2.16599989F), new Vector2(69.8270035F, -32.1660004F), new Vector2(51.8269997F, -50.1660004F));
                    builder.AddCubicBezier(new Vector2(33.8269997F, -68.1660004F), new Vector2(3.8269999F, -68.1660004F), new Vector2(-14.1730003F, -50.1660004F));
                    builder.AddCubicBezier(new Vector2(-14.1730003F, -50.1660004F), new Vector2(-27.6730003F, -36.6660004F), new Vector2(-27.6730003F, -36.6660004F));
                    builder.AddCubicBezier(new Vector2(-36F, -29.25F), new Vector2(-38.0480003F, -32.9160004F), new Vector2(-44.0480003F, -38.9160004F));
                    builder.AddCubicBezier(new Vector2(-50.0480003F, -44.9160004F), new Vector2(-54.5F, -48.5F), new Vector2(-47.1730003F, -56.1660004F));
                    builder.AddCubicBezier(new Vector2(-47.1730003F, -56.1660004F), new Vector2(-33.6730003F, -69.6660004F), new Vector2(-33.6730003F, -69.6660004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - ShapeGroup: Copy-link
            // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            // - - Path
            CanvasGeometry Geometry_17()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(12.6280003F, -29.6420002F));
                    builder.AddCubicBezier(new Vector2(17.1630001F, -34.1069984F), new Vector2(23.1620007F, -34.0600014F), new Vector2(27.6270008F, -29.5249996F));
                    builder.AddCubicBezier(new Vector2(27.6270008F, -29.5249996F), new Vector2(32.0919991F, -24.9899998F), new Vector2(32.0919991F, -24.9899998F));
                    builder.AddCubicBezier(new Vector2(36.5569992F, -20.4549999F), new Vector2(36.5110016F, -14.4560003F), new Vector2(31.9759998F, -9.99100018F));
                    builder.AddCubicBezier(new Vector2(31.9759998F, -9.99100018F), new Vector2(14.1599998F, 6.86199999F), new Vector2(14.1599998F, 6.86199999F));
                    builder.AddCubicBezier(new Vector2(14.1599998F, 6.86199999F), new Vector2(13.1929998F, 7.8130002F), new Vector2(13.1929998F, 7.8130002F));
                    builder.AddCubicBezier(new Vector2(13.1929998F, 7.8130002F), new Vector2(13.0869999F, 7.91800022F), new Vector2(13.0869999F, 7.91800022F));
                    builder.AddCubicBezier(new Vector2(13.0869999F, 7.91800022F), new Vector2(11.3479996F, 9.63000011F), new Vector2(11.3479996F, 9.63000011F));
                    builder.AddCubicBezier(new Vector2(11.3479996F, 9.63000011F), new Vector2(-6.15100002F, 26.934F), new Vector2(-6.15100002F, 26.934F));
                    builder.AddCubicBezier(new Vector2(-10.6859999F, 31.3990002F), new Vector2(-16.6860008F, 31.3530006F), new Vector2(-21.1509991F, 26.8180008F));
                    builder.AddCubicBezier(new Vector2(-21.1509991F, 26.8180008F), new Vector2(-25.6159992F, 22.2830009F), new Vector2(-25.6159992F, 22.2830009F));
                    builder.AddCubicBezier(new Vector2(-30.0809994F, 17.7479992F), new Vector2(-30.0340004F, 11.7480001F), new Vector2(-25.4990005F, 7.28299999F));
                    builder.AddCubicBezier(new Vector2(-25.4990005F, 7.28299999F), new Vector2(-7.33500004F, -10.6750002F), new Vector2(-7.33500004F, -10.6750002F));
                    builder.AddCubicBezier(new Vector2(-7.33500004F, -10.6750002F), new Vector2(-5.97800016F, -12.0109997F), new Vector2(-5.97800016F, -12.0109997F));
                    builder.AddCubicBezier(new Vector2(-5.97800016F, -12.0109997F), new Vector2(-5.81599998F, -12.1709995F), new Vector2(-5.81599998F, -12.1709995F));
                    builder.AddCubicBezier(new Vector2(-5.81599998F, -12.1709995F), new Vector2(-4.1500001F, -13.8120003F), new Vector2(-4.1500001F, -13.8120003F));
                    builder.AddCubicBezier(new Vector2(-4.1500001F, -13.8120003F), new Vector2(12.6280003F, -29.6420002F), new Vector2(12.6280003F, -29.6420002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_18()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(181.710999F, 52.3110008F), new Vector2(181.710999F, -52.3110008F), new Vector2(117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(52.3110008F, -181.710999F), new Vector2(-52.3110008F, -181.710999F), new Vector2(-117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(-181.710999F, -52.3110008F), new Vector2(-181.710999F, 52.3110008F), new Vector2(-117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(-52.3110008F, 181.710999F), new Vector2(52.3110008F, 181.712006F), new Vector2(117.011002F, 117.011002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - - Layer aggregator
            // - - - - - Layer: Wibe
            // - - - Transforms: Wibe Scale:0.9732,0.9732
            // - Path
            CanvasGeometry Geometry_19()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(172.035004F, 172.035004F));
                    builder.AddCubicBezier(new Vector2(267.160004F, 76.9100037F), new Vector2(267.160004F, -76.9100037F), new Vector2(172.035004F, -172.035004F));
                    builder.AddCubicBezier(new Vector2(76.9100037F, -267.160004F), new Vector2(-76.9100037F, -267.160004F), new Vector2(-172.035004F, -172.035004F));
                    builder.AddCubicBezier(new Vector2(-267.160004F, -76.9100037F), new Vector2(-267.160004F, 76.9100037F), new Vector2(-172.035004F, 172.035004F));
                    builder.AddCubicBezier(new Vector2(-76.9100037F, 267.160004F), new Vector2(76.9100037F, 267.160004F), new Vector2(172.035004F, 172.035004F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                // Transforms: Wibe Scale:0.9732,0.9732
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_00());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_09());
                return result;
            }

            CompositionPath Path_2()
            {
                if (_path_2 != null) { return _path_2; }
                var result = _path_2 = new CompositionPath(Geometry_18());
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Copy-link
            // Path 4+Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry();
                return result;
            }

            // Layer aggregator
            // Path 4+Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ThemeColor_Foreground();
                return result;
            }

            // - - Layer aggregator
            // - Layer: Wibe
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Scale:<0.9732, 0.9732>
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(0.973200023F, 0F, 0F, 0.973200023F, 0F, 0F));;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.699999988F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.300000012F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - Layer aggregator
            // - ShapeGroup: Copy-link
            // Path 4+Path 3+Path 2+Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), StepThenHoldEasingFunction());
                // Frame 2.
                result.InsertKeyFrame(0.0166666675F, Path_0(), HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, new CompositionPath(Geometry_05()), _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 29.
                result.InsertKeyFrame(0.24166666F, Path_1(), _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.200000003F, 1F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, Path_1(), HoldThenStepEasingFunction());
                // Frame 50.
                result.InsertKeyFrame(0.416666657F, new CompositionPath(Geometry_13()), _c.CreateCubicBezierEasingFunction(new Vector2(0.49000001F, 0F), new Vector2(0.400000006F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, Path_0(), _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 0F), new Vector2(0.5F, 1F)));
                return result;
            }

            // - - - - Layer aggregator
            // - - - Layer: Wibe
            // - Transforms: Wibe Scale:0.9732,0.9732
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_1()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_2(), StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, Path_2(), HoldThenStepEasingFunction());
                // Frame 40.
                result.InsertKeyFrame(0.333333343F, new CompositionPath(Geometry_19()), CubicBezierEasingFunction_1());
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_360 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_360; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_360 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, -68.0749969F, _c.CreateCubicBezierEasingFunction(new Vector2(0.279000014F, 0F), new Vector2(0.643000007F, 0.971000016F)));
                // Frame 27.
                result.InsertKeyFrame(0.224999994F, 220F, _c.CreateCubicBezierEasingFunction(new Vector2(0.363999993F, 0F), new Vector2(0.200000003F, 0.912F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 225F, _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 1F), new Vector2(0.200000003F, 1F)));
                // Frame 48.
                result.InsertKeyFrame(0.400000006F, 365F, _c.CreateCubicBezierEasingFunction(new Vector2(0.757000029F, 0F), new Vector2(0.5F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 360F, CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1()
            {
                // Frame 0.
                if (_scalarAnimation_0_to_1 != null) { return _scalarAnimation_0_to_1; }
                var result = _scalarAnimation_0_to_1 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, 0.980000019F, _c.CreateCubicBezierEasingFunction(new Vector2(0.379999995F, 0F), new Vector2(0.400000006F, 0.865999997F)));
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 0.870000005F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.537999988F, 1F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.523000002F, 1F)));
                // Frame 45.
                result.InsertKeyFrame(0.375F, 0.899999976F, _c.CreateCubicBezierEasingFunction(new Vector2(0.474999994F, 0.455000013F), new Vector2(0.561999977F, 1F)));
                // Frame 52.
                result.InsertKeyFrame(0.433333337F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.437999994F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_20_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 20F, StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 20F, HoldThenStepEasingFunction());
                // Frame 38.
                result.InsertKeyFrame(0.316666663F, 0F, CubicBezierEasingFunction_1());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                var shapes = result.Shapes;
                // ShapeGroup: Copy-link
                shapes.Add(SpriteShape_0());
                // Layer: Wibe
                shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                // Frame 0.
                if (_offsetVector2Animation != null) { return _offsetVector2Animation; }
                var result = _offsetVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(256F, 256F), StepThenHoldEasingFunction());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, new Vector2(256F, 256F), HoldThenStepEasingFunction());
                // Frame 44.
                result.InsertKeyFrame(0.366666675F, new Vector2(256F, 264.25F), CubicBezierEasingFunction_0());
                // Frame 51.
                result.InsertKeyFrame(0.425000012F, new Vector2(256F, 248.5F), CubicBezierEasingFunction_0());
                // Frame 58.
                result.InsertKeyFrame(0.483333319F, new Vector2(256F, 256F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 18.
                result.InsertKeyFrame(0.150000006F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 41.
                result.InsertKeyFrame(0.341666669F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            internal TeachingTipLinkCopied_AnimatedVisual_UAPv11(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_containerShape_0, "Scale", ShapeVisibilityAnimation(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.X", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.Y", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Offset", OffsetVector2Animation(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_0, "Path", PathKeyFrameAnimation_0(), RootProgress());
                StartProgressBoundAnimation(_pathGeometry_1, "Path", PathKeyFrameAnimation_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Scale.X", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Scale.Y", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Offset", OffsetVector2Animation(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_1, "StrokeThickness", StrokeThicknessScalarAnimation_20_to_0(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("RotationAngleInDegrees");
                _containerShape_1.StopAnimation("Scale.X");
                _containerShape_1.StopAnimation("Scale.Y");
                _containerShape_1.StopAnimation("Offset");
                _pathGeometry_0.StopAnimation("Path");
                _pathGeometry_1.StopAnimation("Path");
                _spriteShape_0.StopAnimation("RotationAngleInDegrees");
                _spriteShape_0.StopAnimation("Scale.X");
                _spriteShape_0.StopAnimation("Scale.Y");
                _spriteShape_0.StopAnimation("Offset");
                _spriteShape_1.StopAnimation("StrokeThickness");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class TeachingTipLinkCopied_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 20000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Foreground;
            CompositionContainerShape _containerShape_0;
            CompositionContainerShape _containerShape_1;
            CompositionSpriteShape _spriteShape_0;
            CompositionSpriteShape _spriteShape_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            ScalarKeyFrameAnimation _rotationAngleInDegreesScalarAnimation_0_to_360;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;
            Vector2KeyFrameAnimation _offsetVector2Animation;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            // - - - Layer aggregator
            // - - ShapeGroup: Copy-link
            // - Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2(), Geometry_3(), Geometry_4() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(198F, 57F), new Vector2(198F, -57F), new Vector2(127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(57F, -198F), new Vector2(-57F, -198F), new Vector2(-127.5F, -127.5F));
                    builder.AddCubicBezier(new Vector2(-198F, -57F), new Vector2(-198F, 57F), new Vector2(-127.5F, 127.5F));
                    builder.AddCubicBezier(new Vector2(-57F, 198F), new Vector2(57F, 198F), new Vector2(127.5F, 127.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-51F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-45F, -25.5F), new Vector2(-45F, -18F), new Vector2(-51F, -12F));
                    builder.AddLine(new Vector2(-64.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-82.5F, 18F), new Vector2(-82.5F, 48F), new Vector2(-64.5F, 66F));
                    builder.AddCubicBezier(new Vector2(-46.5F, 84F), new Vector2(-19.5F, 84F), new Vector2(-1.5F, 67.5F));
                    builder.AddLine(new Vector2(13.5F, 52.5F));
                    builder.AddCubicBezier(new Vector2(19.5F, 46.5F), new Vector2(27F, 46.5F), new Vector2(33F, 52.5F));
                    builder.AddCubicBezier(new Vector2(39F, 58.5F), new Vector2(39F, 66F), new Vector2(33F, 72F));
                    builder.AddLine(new Vector2(19.5F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-9F, 114F), new Vector2(-55.5F, 114F), new Vector2(-84F, 85.5F));
                    builder.AddCubicBezier(new Vector2(-112.5F, 57F), new Vector2(-112.5F, 10.5F), new Vector2(-84F, -18F));
                    builder.AddLine(new Vector2(-70.5F, -31.5F));
                    builder.AddCubicBezier(new Vector2(-64.5F, -37.5F), new Vector2(-57F, -37.5F), new Vector2(-51F, -31.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-15F, -88.5F));
                    builder.AddCubicBezier(new Vector2(13.5F, -117F), new Vector2(60F, -117F), new Vector2(88.5F, -88.5F));
                    builder.AddCubicBezier(new Vector2(117F, -60F), new Vector2(116.75F, -13.875F), new Vector2(89.125F, 15.375F));
                    builder.AddLine(new Vector2(75.875F, 29.625F));
                    builder.AddCubicBezier(new Vector2(69.875F, 35.625F), new Vector2(63F, 35.4370003F), new Vector2(57F, 30F));
                    builder.AddCubicBezier(new Vector2(50.7130013F, 24.302F), new Vector2(51F, 16.5F), new Vector2(57F, 10.5F));
                    builder.AddLine(new Vector2(70.5F, -3F));
                    builder.AddCubicBezier(new Vector2(88.5F, -21F), new Vector2(88.5F, -51F), new Vector2(70.5F, -69F));
                    builder.AddCubicBezier(new Vector2(52.5F, -87F), new Vector2(22.5F, -87F), new Vector2(4.5F, -69F));
                    builder.AddLine(new Vector2(-9F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-15F, -49.5F), new Vector2(-22.5F, -49.5F), new Vector2(-28.5F, -55.5F));
                    builder.AddCubicBezier(new Vector2(-34.5F, -61.5F), new Vector2(-34.5F, -69F), new Vector2(-28.5F, -75F));
                    builder.AddLine(new Vector2(-15F, -88.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Copy-link
            // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(21F, -39F));
                    builder.AddCubicBezier(new Vector2(25.5F, -43.5F), new Vector2(31.5F, -43.5F), new Vector2(36F, -39F));
                    builder.AddLine(new Vector2(40.5F, -34.5F));
                    builder.AddCubicBezier(new Vector2(45F, -30F), new Vector2(45F, -24F), new Vector2(40.5F, -19.5F));
                    builder.AddLine(new Vector2(14.2229996F, 6.77699995F));
                    builder.AddLine(new Vector2(13.2639999F, 7.73600006F));
                    builder.AddLine(new Vector2(13.1590004F, 7.84100008F));
                    builder.AddLine(new Vector2(11.4329996F, 9.56700039F));
                    builder.AddLine(new Vector2(-15F, 36F));
                    builder.AddCubicBezier(new Vector2(-19.5F, 40.5F), new Vector2(-25.5F, 40.5F), new Vector2(-30F, 36F));
                    builder.AddLine(new Vector2(-34.5F, 31.5F));
                    builder.AddCubicBezier(new Vector2(-39F, 27F), new Vector2(-39F, 21F), new Vector2(-34.5F, 16.5F));
                    builder.AddLine(new Vector2(-7.40700006F, -10.5930004F));
                    builder.AddLine(new Vector2(-6.06099987F, -11.9390001F));
                    builder.AddLine(new Vector2(-5.89900017F, -12.1009998F));
                    builder.AddLine(new Vector2(-4.24599981F, -13.7539997F));
                    builder.AddLine(new Vector2(21F, -39F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Layer: Wibe
            // - - Transforms: Wibe Scale:0.9732,0.9732
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(181.710999F, 52.3110008F), new Vector2(181.710999F, -52.3110008F), new Vector2(117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(52.3110008F, -181.710999F), new Vector2(-52.3110008F, -181.710999F), new Vector2(-117.011002F, -117.011002F));
                    builder.AddCubicBezier(new Vector2(-181.710999F, -52.3110008F), new Vector2(-181.710999F, 52.3110008F), new Vector2(-117.011002F, 117.011002F));
                    builder.AddCubicBezier(new Vector2(-52.3110008F, 181.710999F), new Vector2(52.3110008F, 181.712006F), new Vector2(117.011002F, 117.011002F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color bound to theme property value: Foreground
            CompositionColorBrush ThemeColor_Foreground()
            {
                if (_themeColor_Foreground != null) { return _themeColor_Foreground; }
                var result = _themeColor_Foreground = _c.CreateColorBrush();
                BindProperty(_themeColor_Foreground, "Color", "ColorRGB(_theme.Foreground.W,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", "_theme", _themeProperties);
                return result;
            }

            // Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_0()
            {
                if (_containerShape_0 != null) { return _containerShape_0; }
                var result = _containerShape_0 = _c.CreateContainerShape();
                result.Scale = new Vector2(0F, 0F);
                result.Shapes.Add(ContainerShape_1());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            CompositionContainerShape ContainerShape_1()
            {
                if (_containerShape_1 != null) { return _containerShape_1; }
                var result = _containerShape_1 = _c.CreateContainerShape();
                // Transforms: Wibe Scale:0.9732,0.9732
                result.Shapes.Add(SpriteShape_1());
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Copy-link
            // Path 4+Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_5()));
            }

            // Layer aggregator
            // Path 4+Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                if (_spriteShape_0 != null) { return _spriteShape_0; }
                var result = _spriteShape_0 = _c.CreateSpriteShape(PathGeometry_0());
                result.FillBrush = ThemeColor_Foreground();
                return result;
            }

            // - - Layer aggregator
            // - Layer: Wibe
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Scale:<0.9732, 0.9732>
                if (_spriteShape_1 != null) { return _spriteShape_1; }
                var result = _spriteShape_1 = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(0.973200023F, 0F, 0F, 0.973200023F, 0F, 0F));;
                result.StrokeBrush = ThemeColor_Foreground();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.699999988F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
            {
                // Frame 0.
                if (_rotationAngleInDegreesScalarAnimation_0_to_360 != null) { return _rotationAngleInDegreesScalarAnimation_0_to_360; }
                var result = _rotationAngleInDegreesScalarAnimation_0_to_360 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, -68.0749969F, _c.CreateCubicBezierEasingFunction(new Vector2(0.279000014F, 0F), new Vector2(0.643000007F, 0.971000016F)));
                // Frame 27.
                result.InsertKeyFrame(0.224999994F, 220F, _c.CreateCubicBezierEasingFunction(new Vector2(0.363999993F, 0F), new Vector2(0.200000003F, 0.912F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 225F, _c.CreateCubicBezierEasingFunction(new Vector2(0.5F, 1F), new Vector2(0.200000003F, 1F)));
                // Frame 48.
                result.InsertKeyFrame(0.400000006F, 365F, _c.CreateCubicBezierEasingFunction(new Vector2(0.757000029F, 0F), new Vector2(0.5F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 360F, CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1()
            {
                // Frame 0.
                if (_scalarAnimation_0_to_1 != null) { return _scalarAnimation_0_to_1; }
                var result = _scalarAnimation_0_to_1 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 8.
                result.InsertKeyFrame(0.0666666701F, 0.980000019F, _c.CreateCubicBezierEasingFunction(new Vector2(0.379999995F, 0F), new Vector2(0.400000006F, 0.865999997F)));
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 0.870000005F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.537999988F, 1F)));
                // Frame 34.
                result.InsertKeyFrame(0.283333331F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.523000002F, 1F)));
                // Frame 45.
                result.InsertKeyFrame(0.375F, 0.899999976F, _c.CreateCubicBezierEasingFunction(new Vector2(0.474999994F, 0.455000013F), new Vector2(0.561999977F, 1F)));
                // Frame 52.
                result.InsertKeyFrame(0.433333337F, 1.04999995F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.437999994F, 1F)));
                // Frame 60.
                result.InsertKeyFrame(0.5F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - - Layer: Wibe
            // Transforms: Wibe Scale:0.9732,0.9732
            // StrokeThickness
            ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_20_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 20F, StepThenHoldEasingFunction());
                // Frame 17.
                result.InsertKeyFrame(0.141666666F, 20F, HoldThenStepEasingFunction());
                // Frame 38.
                result.InsertKeyFrame(0.316666663F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.300000012F, 0F), new Vector2(0.300000012F, 1F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                var shapes = result.Shapes;
                // ShapeGroup: Copy-link
                shapes.Add(SpriteShape_0());
                // Layer: Wibe
                shapes.Add(ContainerShape_0());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                // Frame 0.
                if (_offsetVector2Animation != null) { return _offsetVector2Animation; }
                var result = _offsetVector2Animation = CreateVector2KeyFrameAnimation(0F, new Vector2(256F, 256F), StepThenHoldEasingFunction());
                // Frame 35.
                result.InsertKeyFrame(0.291666657F, new Vector2(256F, 256F), HoldThenStepEasingFunction());
                // Frame 44.
                result.InsertKeyFrame(0.366666675F, new Vector2(256F, 264.25F), CubicBezierEasingFunction_0());
                // Frame 51.
                result.InsertKeyFrame(0.425000012F, new Vector2(256F, 248.5F), CubicBezierEasingFunction_0());
                // Frame 58.
                result.InsertKeyFrame(0.483333319F, new Vector2(256F, 256F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Layer: Wibe
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 18.
                result.InsertKeyFrame(0.150000006F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                // Frame 41.
                result.InsertKeyFrame(0.341666669F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                return result;
            }

            internal TeachingTipLinkCopied_AnimatedVisual_UAPv7(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_containerShape_0, "Scale", ShapeVisibilityAnimation(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.X", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Scale.Y", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_containerShape_1, "Offset", OffsetVector2Animation(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Scale.X", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Scale.Y", ScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_0, "Offset", OffsetVector2Animation(), RootProgress());
                StartProgressBoundAnimation(_spriteShape_1, "StrokeThickness", StrokeThicknessScalarAnimation_20_to_0(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _containerShape_0.StopAnimation("Scale");
                _containerShape_1.StopAnimation("RotationAngleInDegrees");
                _containerShape_1.StopAnimation("Scale.X");
                _containerShape_1.StopAnimation("Scale.Y");
                _containerShape_1.StopAnimation("Offset");
                _spriteShape_0.StopAnimation("RotationAngleInDegrees");
                _spriteShape_0.StopAnimation("Scale.X");
                _spriteShape_0.StopAnimation("Scale.Y");
                _spriteShape_0.StopAnimation("Offset");
                _spriteShape_1.StopAnimation("StrokeThickness");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
